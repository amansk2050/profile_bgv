{
	"swagger": "2.0",
	"info": {
		"description": "Documentation of  code5 portal.",
		"version": "2.0.0",
		"title": "code5 portal"
	},
	"host": "llsnxr0s7f.execute-api.ap-south-1.amazonaws.com",
	"basePath": "/development",
	"schemes": [
		"https",
		"http"
	],
	"paths": {
		"/hcmCategory": {
			"get": {
				"tags": [
					"hcmCategory"
				],
				"summary": "Search Category  ",
				"description": "Search Category on the basis of status and category name",
				"operationId": "searchcategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "enter name",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Category found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmCategory"
				],
				"summary": "Add Category",
				"description": "Add Category, status,category description ",
				"operationId": "addCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Question And Answer added Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmCategory"
				],
				"summary": "Update Category",
				"description": "Update Category , status, Category Description",
				"operationId": "updateCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "questions and answers Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmCategory"
				],
				"summary": "Delete Category",
				"description": "Delete Category , status, Category Description",
				"operationId": "deleteCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "questions and answers deleted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmFAQ": {
			"get": {
				"tags": [
					"hcmFAQ"
				],
				"summary": "GET Question and Answer  ",
				"description": "Search Question and Answer on the basis of status ,specific question and answer",
				"operationId": "getquestion&answer",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "question",
						"in": "query",
						"description": "enter question",
						"required": false,
						"type": "string"
					},
					{
						"name": "answer",
						"in": "query",
						"description": "enter answer",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status",
						"required": false,
						"type": "string"
					},
					{
						"name": "cat_id",
						"in": "query",
						"description": "enter cat_id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Question & Answers found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmFAQ"
				],
				"summary": "Add Question And Answer",
				"description": "Add Frequently asked question and answers ",
				"operationId": "addquestion&answers",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addquestionanswer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Question And Answer added Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmFAQ"
				],
				"summary": "Update questions ,answers and status",
				"description": "Update questions ,answers and status",
				"operationId": "updatequestions&answers",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Updatequestionanswer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "questions and answers Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmFAQ"
				],
				"summary": "Delete questions ,answers and status",
				"description": "Delete questions ,answers and status",
				"operationId": "deletequestions&answers",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deletequestionsanswers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "questions and answers deleted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmProbationCycle": {
			"get": {
				"tags": [
					"hcmProbationCycle"
				],
				"summary": "GET ProbationDueDate of user ",
				"description": "See details of ProbationDueDate users on the basis of email,fullname,probationstatus,date range",
				"operationId": "getlogs1",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "email",
						"in": "query",
						"description": "enter email",
						"required": false,
						"type": "string"
					},
					{
						"name": "fullName",
						"in": "query",
						"description": "enter fullName ",
						"required": false,
						"type": "string"
					},
					{
						"name": "probationstatus",
						"in": "query",
						"description": "enter status ",
						"required": false,
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "enter start_date (YYYY-MM-DD)",
						"required": false,
						"type": "string"
					},
					{
						"name": "end_date",
						"in": "query",
						"description": "enter end_date (YYYY-MM-DD)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "User found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmProbationCycle"
				],
				"summary": "Set probationDueDate according to his joining date",
				"description": "SetProbationDueDate",
				"operationId": "SetProbationDueDate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SetProbationDueDate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "ProbationDueDate added Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmProbationCycle"
				],
				"summary": "Update Probation due date ",
				"description": "Update Probation due date",
				"operationId": "updateuserdetails",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdateprobationDueDate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User ProbationDueDate Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"hcmProbationCycle"
				],
				"summary": "Count no. of user with pending probation ",
				"description": "Count no. of user with pending probation",
				"operationId": "countdueprobation",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FindCount"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Count found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/emergencyLeave": {
			"post": {
				"tags": [
					"Emergency Leave"
				],
				"summary": "apply emergencyLeave if you want leave more than 3 days as urgent",
				"description": "emergencyLeave",
				"operationId": "postLeave",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postLeave"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmBadge": {
			"get": {
				"tags": [
					"Badge"
				],
				"summary": "GET all badge details  ",
				"description": "get badge details by badge id or status",
				"operationId": "getBadgeData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "badge_name",
						"in": "query",
						"description": "enter page badge_name to search badge ",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status [INPUT : (true/false)]",
						"required": false,
						"type": "string"
					},
					{
						"name": "badge_id",
						"in": "query",
						"description": "enter badge_id to get details of that badge",
						"required": false,
						"type": "string"
					},
					{
						"name": "visibility",
						"in": "query",
						"description": "enter true or false",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"Badge"
				],
				"summary": "inserting badge",
				"description": "enter new badge by entering badge_name , description, image_url,visibility",
				"operationId": "postBadge",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postBadge"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"Badge"
				],
				"summary": "upate badge ",
				"description": "update badge ",
				"operationId": "updateBadge",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateBadge"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"Badge"
				],
				"summary": "patch badge ",
				"description": "update badge seen by any user badge and enter show (badge) to see all badge you can give ",
				"operationId": "updatehcmBadge",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/patchBadge"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file patch project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"Badge"
				],
				"summary": "delete badge",
				"description": "...........delete badge by badge_id",
				"operationId": "deleteBadge",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteBadge"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmBadgeComment": {
			"get": {
				"tags": [
					"Comment"
				],
				"summary": "GET all comment details  ",
				"description": "get max badge and employee details for admin",
				"operationId": "getCommentData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "enter start_date (yyyy-mm-dd)",
						"required": false,
						"type": "string"
					},
					{
						"name": "end_date",
						"in": "query",
						"description": "enter end_date (yyyy-mm-dd)",
						"required": false,
						"type": "string"
					},
					{
						"name": "badge_id",
						"in": "query",
						"description": "enter badge_id to get details of that badge",
						"required": false,
						"type": "string"
					},
					{
						"name": "badge_reciver",
						"in": "query",
						"description": "enter badge_reciver to get details of that badge_reciver",
						"required": false,
						"type": "string"
					},
					{
						"name": "badge_sender",
						"in": "query",
						"description": "enter badge_sender ",
						"required": false,
						"type": "string"
					},
					{
						"name": "get",
						"in": "query",
						"description": "enter 'MAX' to get maximum badge reciver with dates , if you enter badge_id you will get maximum badge reciver of that id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"Comment"
				],
				"summary": "inserting comment",
				"description": "enter comment by entering badge_id,comment,reciver",
				"operationId": "postComment",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postComment"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"Comment"
				],
				"summary": "upate comment ",
				"description": "update comment ",
				"operationId": "updateComment",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateComment"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"Comment"
				],
				"summary": "patch comment ",
				"description": "get own badge with seen status,enter badge receiver to see thier badge  ",
				"operationId": "patchCommnent",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/patchComment"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file patch project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"Comment"
				],
				"summary": "delete comment",
				"description": "...........delete comment by comment id",
				"operationId": "deletehcmBadge",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteComment"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmTrainingAnswer": {
			"get": {
				"tags": [
					"trainingAnswer"
				],
				"summary": "GET all trainingAnswer details  ",
				"description": "get all answer with email for admin",
				"operationId": "getTrainingAnswerData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status ...",
						"required": false,
						"type": "string"
					},
					{
						"name": "user_email",
						"in": "query",
						"description": "enter user email to get answer of that user",
						"required": false,
						"type": "string"
					},
					{
						"name": "question_id",
						"in": "query",
						"description": "enter question_id ...",
						"required": false,
						"type": "string"
					},
					{
						"name": "paper_id",
						"in": "query",
						"description": "enter paper_id ...",
						"required": false,
						"type": "string"
					},
					{
						"name": "answer_id",
						"in": "query",
						"description": "enter  answer_id...",
						"required": false,
						"type": "string"
					},
					{
						"name": "position_id",
						"in": "query",
						"description": "enter  position_id...",
						"required": false,
						"type": "string"
					},
					{
						"name": "company_id",
						"in": "query",
						"description": "enter  company_id...",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"trainingAnswer"
				],
				"summary": "inserting answer",
				"description": "enter answer for your question",
				"operationId": "postTrainingAnswer",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postTrainingAnswer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"trainingAnswer"
				],
				"summary": "update answer_id  ",
				"description": "update answer_id to true and false ",
				"operationId": "updateTrainigAnswer",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTrainingAnswer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"trainingAnswer"
				],
				"summary": "patch trainingAnswer  ",
				"description": "fetch question assigned to user  ",
				"operationId": "patchTrainingAnswer",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/patchTrainingAnswer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"trainingAnswer"
				],
				"summary": "delete answer ",
				"description": "delete answer by answer_id",
				"operationId": "deleteTrainigAnswer",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteTrainingAnswer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			}
		},
		"/hcmTrainingCategory": {
			"get": {
				"tags": [
					"trainingCategory"
				],
				"summary": "GET all trainingCategory details  ",
				"description": "get all category with category_id or status",
				"operationId": "getTrainingCategoryData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "category_name",
						"in": "query",
						"description": "category_name to search category",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status ...(true/false)",
						"required": false,
						"type": "string"
					},
					{
						"name": "category_id",
						"in": "query",
						"description": "enter category_id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"trainingCategory"
				],
				"summary": "inserting category",
				"description": "enter category by cat_name,description,image_url",
				"operationId": "postTrainingCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postTrainingCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"trainingCategory"
				],
				"summary": "update category  ",
				"description": "update category by status,cat_name,description,image_url ",
				"operationId": "updateTrainingCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTrainingCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"trainingCategory"
				],
				"summary": "delete category ",
				"description": "delete category by category_id",
				"operationId": "deleteTrainingCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteTrainingCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmTrainingSubCategory": {
			"get": {
				"tags": [
					"trainingSubCategory"
				],
				"summary": "GET all trainingSubCategory details  ",
				"description": "get all subCategory with category_id ,sub_id or status",
				"operationId": "getTrainingSubCategoryData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "subCategory_name",
						"in": "query",
						"description": "enter subCategory_name to search ",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status ...(true/false)",
						"required": false,
						"type": "string"
					},
					{
						"name": "category_id",
						"in": "query",
						"description": "enter category_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "sub_id",
						"in": "query",
						"description": "enter sub_id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"trainingSubCategory"
				],
				"summary": "inserting subCategory",
				"description": "enter subCategory by sub_name,description,image_url,category_id",
				"operationId": "postTrainingCourse",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postTrainingSubCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"trainingSubCategory"
				],
				"summary": "update Subcategory  ",
				"description": "update subCategory by status,sub_name,description,image_url ",
				"operationId": "updateTrainingSubCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTrainingSubCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"trainingSubCategory"
				],
				"summary": "delete subCategory ",
				"description": "delete SubCategory by sub_id",
				"operationId": "deleteTrainingSubCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteTrainingSubCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmTrainingCourse": {
			"get": {
				"tags": [
					"trainingCourse"
				],
				"summary": "GET all trainingCourse details  ",
				"description": "get all course with course_id ,sub_id or status",
				"operationId": "getTrainingCourseData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status ...(true/false)",
						"required": false,
						"type": "string"
					},
					{
						"name": "course_id",
						"in": "query",
						"description": "enter course_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "sub_id",
						"in": "query",
						"description": "enter sub_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "course_name",
						"in": "query",
						"description": "enter course_name",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"trainingCourse"
				],
				"summary": "inserting course",
				"description": "enter Course by course_name,description,image_url,sub_id",
				"operationId": "postHCMTrainingCourse",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postTrainingCourse"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"trainingCourse"
				],
				"summary": "update course  ",
				"description": "update course by status,course_name,description,image_url ,sub_id",
				"operationId": "updateTrainingCourse",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTrainingCourse"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"trainingCourse"
				],
				"summary": "delete course ",
				"description": "delete course by course_id",
				"operationId": "deleteTrainingCourse",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteTrainingCourse"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"trainingCourse"
				],
				"summary": "patch course ",
				"description": "patch course search your course here",
				"operationId": "patchTrainingCourse",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/patchTrainingCourse"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmTrainingLecture": {
			"get": {
				"tags": [
					"trainingLecture"
				],
				"summary": "GET all trainingLecture details  ",
				"description": "get all lecture with course_id ,lecture_id or status",
				"operationId": "getTrainingLectureData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "lecture_name",
						"in": "query",
						"description": "lecture_name to search lecture.",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status ...(true/false)",
						"required": false,
						"type": "string"
					},
					{
						"name": "course_id",
						"in": "query",
						"description": "enter course_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "lecture_id",
						"in": "query",
						"description": "enter lecture_id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"trainingLecture"
				],
				"summary": "inserting lecture",
				"description": "enter lecture by lecture_name,description,reference,course_id",
				"operationId": "postTrainingLecture",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postTrainingLecture"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"trainingLecture"
				],
				"summary": "update lecture  ",
				"description": "update lecture by status,lecture_name,description,reference ,course_id",
				"operationId": "updateTrainingLecture",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTrainingLecture"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"trainingLecture"
				],
				"summary": "delete lecture ",
				"description": "delete lecture by lecture_id",
				"operationId": "deleteTrainingLecture",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteTrainingLecture"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"trainingLecture"
				],
				"summary": "patch lecture ",
				"description": "patch lecture inserting lecture taken by user",
				"operationId": "patchTrainingLecture",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/patchTrainingLecture"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmTrainingQuestion": {
			"get": {
				"tags": [
					"trainingQuestion"
				],
				"summary": "GET all trainingQuestion details  ",
				"description": "get all question with question_id or status",
				"operationId": "getTrainingQuestionData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status ...(true/false)",
						"required": false,
						"type": "string"
					},
					{
						"name": "question_id",
						"in": "query",
						"description": "enter question_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "course_id",
						"in": "query",
						"description": "enter course_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "level",
						"in": "query",
						"description": "enter level(beginner,moderate,professional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "answer_type",
						"in": "query",
						"description": "enter answer_type(mcq,descriptive,document upload)",
						"required": false,
						"type": "string"
					},
					{
						"name": "skills",
						"in": "query",
						"description": "enter skills(promise,async-await,node basic etc..)",
						"required": false,
						"type": "string"
					},
					{
						"name": "created_by",
						"in": "query",
						"description": "enter ",
						"required": false,
						"type": "string"
					},
					{
						"name": "created_at",
						"in": "query",
						"description": "enter created_at",
						"required": false,
						"type": "string"
					},
					{
						"name": "marks",
						"in": "query",
						"description": "enter marks here",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"trainingQuestion"
				],
				"summary": "inserting question",
				"description": "enter question by lecture_id Or course_id",
				"operationId": "postTrainingQuestion",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postTrainingQuestion"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"trainingQuestion"
				],
				"summary": "update question  ",
				"description": "update question by status question_id",
				"operationId": "updateTrainingQuestion",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTrainingQuestion"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"trainingQuestion"
				],
				"summary": "delete question ",
				"description": "delete question by question_id",
				"operationId": "deleteTrainingQuestion",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteTrainingQuestion"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"trainingQuestion"
				],
				"summary": "patch question ",
				"description": "patch question get random question by course_id,..enter qBeginner number,qModerate number, qProfessional number to get the question from each type",
				"operationId": "patchTrainingQuestion",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/patchTrainingQuestion"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			}
		},
		"/hcmTrainingTrack": {
			"get": {
				"tags": [
					"trainingTrack"
				],
				"summary": "GET all trainingTrack details  ",
				"description": "get all course and lecture completed users by user_email",
				"operationId": "getTrainingTrackData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "user_email",
						"in": "query",
						"description": "enter user_email",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status",
						"required": false,
						"type": "string"
					},
					{
						"name": "category_id",
						"in": "query",
						"description": "enter category_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "sub_id",
						"in": "query",
						"description": "enter sub_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "course_id",
						"in": "query",
						"description": "enter course_id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"trainingTrack"
				],
				"summary": "inserting Track",
				"description": "enter course_id to take course for user",
				"operationId": "postTrainingTrack",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postTrainingTrack"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"trainingTrack"
				],
				"summary": "update Track  ",
				"description": "update user course tarck by end_date,score,status, thorugh user_courseId",
				"operationId": "updateTrainingTrack",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTrainingTrack"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"trainingTrack"
				],
				"summary": "patch trainingTrack ",
				"description": "patch track , get own details of course taken",
				"operationId": "patchTrainingTrack",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/patchTrainingTrack"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmQuestionPaper": {
			"get": {
				"tags": [
					"hcmQuestionPaper"
				],
				"summary": "GET all hcmQuestionPaper details  ",
				"description": "get all question with question_id or status",
				"operationId": "gethcmQuestionPaperData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status ...(true/false)",
						"required": false,
						"type": "string"
					},
					{
						"name": "paper_id",
						"in": "query",
						"description": "enter paper_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "title",
						"in": "query",
						"description": "enter title",
						"required": false,
						"type": "string"
					},
					{
						"name": "created_by",
						"in": "query",
						"description": "enter ",
						"required": false,
						"type": "string"
					},
					{
						"name": "created_at",
						"in": "query",
						"description": "enter created_at",
						"required": false,
						"type": "string"
					},
					{
						"name": "updated_at",
						"in": "query",
						"description": "enter updated_at",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmQuestionPaper"
				],
				"summary": "inserting question",
				"description": "enter question by level,skills,qBeginner,qProfessional,qModerate for number of each type, upload_url",
				"operationId": "postHcmQuestionPaper",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postHcmQuestionPaper"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmQuestionPaper"
				],
				"summary": "update question  ",
				"description": "update questionPaper by paper_id",
				"operationId": "updateHcmQuestionPaper",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateHcmQuestionPaper"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file update project details"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmQuestionPaper"
				],
				"summary": "delete question ",
				"description": "delete question by paper_id",
				"operationId": "deleteHcmQuestionPaper",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteHcmQuestionPaper"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"hcmQuestionPaper"
				],
				"summary": "patch question ",
				"description": "patch question get random question by course_id, lecture_id,..enter qBeginner number,qModerate number, qProfessional number to get the question from each type",
				"operationId": "patchhcmQuestionPaper",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/patchhcmQuestionPaper"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmSLAResolver": {
			"put": {
				"tags": [
					"resolver team"
				],
				"summary": "update the ticket after ticket resolved or add comment on ticket under resolving",
				"description": "'ticket_id' contains id of ticket on which status or comment done, 'add' contains either 'status' or 'comment' whatever the resolver wanna do,'comment' contain the description resolver want to provide  ..PLEASE PROVIDE EITHER 'comment' or 'status' in 'add'",
				"operationId": "hcmSLAResolver",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/hcmSLAResolverPut"
						}
					}
				],
				"responses": {
					"200": {
						"description": "update status after reolving of ticket and post in sla logs"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"resolver team"
				],
				"summary": "This api gives unresolved assigned tickets and subordinate escalated tickets",
				"description": "gives all unresolved tickets with details",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status as true or false",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "gets you all the tickets"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"resolver team"
				],
				"summary": "Find the user tickets breached ,ticket  resolved by user,sub-ordinate escalated breached by user also",
				"description": "'page' contains value of page 1,2,3,...,'get' contains value 'ownBreached','subOrdBreached','ownResolved'",
				"operationId": "searchResBre",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/searchResBre"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Tickets Found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmSLATicketDistribution": {
			"get": {
				"tags": [
					"Admin's ticket distribution"
				],
				"summary": "This api gives you tickets on basis of filters to the admin",
				"description": "you can select single/multiple filters at a time to see tickets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "issue",
						"in": "query",
						"description": "enter issue_id like 1/2/3/4 to filter tickets on its basis",
						"required": false,
						"type": "string"
					},
					{
						"name": "resolver_email",
						"in": "query",
						"description": "enter resolver_email i.e. the resolver team person email to see resolver person directly assigned tickets",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "user_email",
						"in": "query",
						"description": "enter user_email to filter tickets i.e. who raises ticket",
						"required": false,
						"type": "string"
					},
					{
						"name": "person_email",
						"in": "query",
						"description": "enter person_email to filter tickets i.e.person to whom ticket assigned",
						"required": false,
						"type": "string"
					},
					{
						"name": "sub_category",
						"in": "query",
						"description": "enter sub_category_id 1/2/3... to filter tickets on their basis",
						"required": false,
						"type": "string"
					},
					{
						"name": "current_status",
						"in": "query",
						"description": "enter enum('open','inprogress','resolved') value to filter tickets on the current_status value",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter true or false to  filter tickets on the status value",
						"required": false,
						"type": "string"
					},
					{
						"name": "category",
						"in": "query",
						"description": "enter category_id 1/2/3... to filter tickets on their basis",
						"required": false,
						"type": "string"
					},
					{
						"name": "name_of_applier",
						"in": "query",
						"description": "enter name of ticket raiser to SEARCH the filters",
						"required": false,
						"type": "string"
					},
					{
						"name": "range_to",
						"in": "query",
						"description": "enter range ending time:-- this will show created tickets in ranges of starting and ending time ",
						"required": false,
						"type": "string"
					},
					{
						"name": "range_from",
						"in": "query",
						"description": "enter range start time and also fill range_to option as compulsory to check tickets of this range",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get tickets based on certain filters"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"Admin's ticket distribution"
				],
				"summary": "assign ticket to particular resolver team person using person_id",
				"description": "please select  the ticket_id as 1/2/3.. which is going to assigned, provide person_email to which ticket is assigned,",
				"operationId": "putDistribution",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/putDistribution"
						}
					}
				],
				"responses": {
					"200": {
						"description": "file shifter to new folder"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmSLATablesDetails": {
			"get": {
				"tags": [
					"admin additional properties"
				],
				"summary": "GET details of tables  ",
				"description": "GET details of tables given by user from DB",
				"operationId": "getData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "table",
						"in": "query",
						"description": "enter table(value as 'category')or(value as 'sub_category')or(value as 'sla_logs')or(value as 'issue')",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status value as true or false ",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page value",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get the details of the table"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"admin additional properties"
				],
				"summary": "upload data in any table",
				"description": "enter (table ='sub_category' ,category_id=1/2/3.. sub_category='internet'...)or(table='category'  category='hardware'/'software'/'pantry' )or(table='issue'  issue='hardware like'/'software'/'pantry' )or(table='sla_logs' log='comment of user' ticket_id=1/2/3)",
				"operationId": "postTable",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/postTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"admin additional properties"
				],
				"summary": "update data in the tables",
				"description": "enter if(table ='category' then 'category' as 'software.')or(table='sub_category' ,'sub_category' as your updated category, 'category_id' as 1,2,3 if you wanna update category_id attached)or(table ='issue','issue'='updated issue'),'status' true or false which you wanna update, id where you wanna update id=1/2/3...",
				"operationId": "updatehcmSLATablesDetails",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/updatehcmSLATablesDetails"
						}
					}
				],
				"responses": {
					"200": {
						"description": "data of table successfully updated"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"admin additional properties"
				],
				"summary": "delete data from tables like delete issue,category,sub_cat",
				"description": "enter table ='category'/'sub_category'/'issue'/'sla_logs'/'ticket' id1=1/2/3... which you wanna delete",
				"operationId": "deletehcmSLATablesDetails",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/deletehcmSLATablesDetails"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmSLARawPlan": {
			"get": {
				"tags": [
					"Raw plan"
				],
				"summary": "GET details of all rawplans  ",
				"description": "get the details of raw plans on the basis of filters,you can select mulitple filters also",
				"operationId": "getRawData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "rawplan_name",
						"in": "query",
						"description": "enter the name of the plan you want to get/see",
						"required": false,
						"type": "string"
					},
					{
						"name": "cycle",
						"in": "query",
						"description": "select one of the enum value('hours','days','weeks','months','years')",
						"required": false,
						"type": "string"
					},
					{
						"name": "total",
						"in": "query",
						"description": "enter total duration of the plan you want to get",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status as true or false",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "range_to",
						"in": "query",
						"description": "enter the ending time of range to get on basis of created_at",
						"required": false,
						"type": "string"
					},
					{
						"name": "range_from",
						"in": "query",
						"description": "enter the starting time of range to get on basis of created_at",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get the details of the raw plans"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"Raw plan"
				],
				"summary": "insert the rawplan",
				"description": "'rawplan_name' contains unique name for plan in string,'cycle' contains one of enum value('hours','days','weeks','months','years'),'plan' contains array of object and contain key and values ..value store the duration of plan level like this example 'plan':[{'one':4,'two':3,'three':4,'four':1}]",
				"operationId": "posthcmSLAPlanRawplan",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/posthcmSLAPlanRawplan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"Raw plan"
				],
				"summary": "update data in the rawplan",
				"description": "'rawplan_name' contains name which is changing,'cycle' contains one of enum value('hours','days','weeks','months','years'),'rawplan' contains array of object and contain key and values ..value store the duration of plan level like this example 'rawplan':[{'one':4,'two':3,'three':4,'four':1}]",
				"operationId": "updatehcmSLAPlanRawplan",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/updatehcmSLAPlanRawplan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "data of table successfully updated"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"Raw plan"
				],
				"summary": "delete rawplan_name",
				"description": "enter the name of rawplan you wanna delete in 'rawplan_name' ",
				"operationId": "deletehcmSLAPlanRawplan",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/deletehcmSLAPlanRawplan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmSLAPlanDetails": {
			"get": {
				"tags": [
					"Detailed plan pack"
				],
				"summary": "GET details of plan pack  ",
				"description": "get the details of the plan pack available",
				"operationId": "getPlanData",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "rawplan_name",
						"in": "query",
						"description": "enter the name of the plan you want to get/see",
						"required": false,
						"type": "string"
					},
					{
						"name": "type_of",
						"in": "query",
						"description": "select one of the enum value('category','sub_category')",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter the page number ",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "select status value as true or false",
						"required": false,
						"type": "string"
					},
					{
						"name": "total",
						"in": "query",
						"description": "enter total duration of the plan you want to get",
						"required": false,
						"type": "string"
					},
					{
						"name": "ref_id",
						"in": "query",
						"description": "enter category_id or sub_category_id like 1,2,3... in 'ref_id'",
						"required": false,
						"type": "string"
					},
					{
						"name": "plan_id",
						"in": "query",
						"description": "enter plan_id of the plan you want to get",
						"required": false,
						"type": "string"
					},
					{
						"name": "range_to",
						"in": "query",
						"description": "enter the ending time of range to get on basis of created_at",
						"required": false,
						"type": "string"
					},
					{
						"name": "range_from",
						"in": "query",
						"description": "enter the starting time of range to get on basis of created_at",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "get the details of the plan pack "
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"Detailed plan pack"
				],
				"summary": "insert the rawplan",
				"description": "select the 'rawplan_name' , 'ref_id' cantains the category_id/sub_category_id value like 1,2,3.., 'type_of' contains one of the enum value('hours','days','weeks','months','years') and 'total contains total of rawplan select or its user choice else pass the total of rawplan total part'",
				"operationId": "posthcmSLAPlanPlandetails",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/posthcmSLAPlanPlandetails"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"Detailed plan pack"
				],
				"summary": "update data in the plan packs",
				"description": "'plan_id' contains id which is updating,'rawplan_name' contains name of rawplan_name after updation,'ref_id' contains the new category_id/sub_category_id value like 1,2,3..,'type_of' contains enum value('category','sub_category'),'total' contains total duration user want to update)",
				"operationId": "updatehcmSLAPlanPlandetails",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/updatehcmSLAPlanPlandetails"
						}
					}
				],
				"responses": {
					"200": {
						"description": "data of plan successfully updated"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"Detailed plan pack"
				],
				"summary": "delete plan pack ",
				"description": "enter the id of plan pack you wanna delete in 'plan_id' ",
				"operationId": "deletehcmSLAPlanPlandetails",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/deletehcmSLAPlanPlandetails"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmSLATicket": {
			"get": {
				"tags": [
					"user activities"
				],
				"summary": "user get its own ticket raised",
				"description": "show details of ticket by email of user",
				"operationId": "gethcmSLATicket",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter the page number ",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "select status value as true or false",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "user own ticket"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"user activities"
				],
				"summary": "here user raises ticket / add comment on previous ticket",
				"description": "if user want to create ticket provide 'add' = 'ticket',provide category as 1/2/3/4...,provide sub_category as 1/2/3...,and comment of user in comment and if user want to add comment then provide 'add'='comment' contain user comment and ticket_id contain the selected ticket_id as 1,2,4..",
				"operationId": "postCreateTicket",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/postCreateTicket"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmSLALogs": {
			"get": {
				"tags": [
					"log view"
				],
				"summary": "here you can see all logs of particular ticket or all sla breached in a range",
				"description": "show logs of ticket by ticket_id or breached sla tickets with how many times of breach",
				"operationId": "hcmSLALogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "from",
						"in": "query",
						"description": "enter starting time in iso format only",
						"required": false,
						"type": "string"
					},
					{
						"name": "to",
						"in": "query",
						"description": "enter end time in iso format only 2008-09-22T14:01:54.957Z",
						"required": false,
						"type": "string"
					},
					{
						"name": "get",
						"in": "query",
						"description": "enter either sla_breach or log......if you enter  sla_breach enter 'to' and 'from' parameter with timstamp..else if you enter log then enter ticket_id ",
						"required": true,
						"type": "string"
					},
					{
						"name": "ticket_id",
						"in": "query",
						"description": "enter ticket_id for which you want to see logs ",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status as true or false",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page number ",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "user own ticket/comment added"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"log view"
				],
				"summary": "log creation containing information of tickets",
				"description": "select the ticket_id and add comment",
				"operationId": "logPost",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/logPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmPerformance": {
			"get": {
				"tags": [
					"hcmPerformance"
				],
				"summary": "GET details of performance and the upcoming evaluation date",
				"description": "GET details of employee upcoming evaluation and evaluation cycle ",
				"operationId": "gethcmPerformance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "email",
						"in": "query",
						"description": "enter email",
						"required": false,
						"type": "string"
					},
					{
						"name": "period_mode",
						"in": "query",
						"description": "enter period_mode",
						"required": false,
						"type": "string"
					},
					{
						"name": "active",
						"in": "query",
						"description": "enter status",
						"required": false,
						"type": "string"
					},
					{
						"name": "plan_id",
						"in": "query",
						"description": "enter plan_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "enter start_date",
						"required": false,
						"type": "string"
					},
					{
						"name": "end_date",
						"in": "query",
						"description": "enter end_date",
						"required": false,
						"type": "string"
					},
					{
						"name": "plan_status",
						"in": "query",
						"description": "enter plan status to check that plan is active or not",
						"required": false,
						"type": "string"
					},
					{
						"name": "designation_id",
						"in": "query",
						"description": "enter designation_id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmPerformance"
				],
				"summary": "Insert the user test days,next evaluation date  ",
				"description": "insert  on the basis of its email,start_date,updated_at,created_by,periods_in_days,next_evaluation_date,description and active",
				"operationId": "CreatehcmPerformance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/InserthcmPerformance"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Inserted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"hcmPerformance"
				],
				"summary": "User get its own detail ",
				"description": "user get its own detail",
				"operationId": "PatchhcmPerformance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "enter page no",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PatchhcmPerformance"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Result found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmPerformance"
				],
				"summary": "Update performance ",
				"description": "Update performance  ",
				"operationId": "UpdatehcmPerformance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdatehcmPerformance"
						}
					}
				],
				"responses": {
					"200": {
						"description": " Updation Sucessful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmPerformance"
				],
				"summary": "delete performance from DB",
				"description": "delete performance on the basis of its email",
				"operationId": "DeletehcmPerformance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeletehcmPerformance"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Deleted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmRoleParameter": {
			"get": {
				"tags": [
					"hcmRoleParameter"
				],
				"summary": "This api gives the parameters based on the employee designation ",
				"description": "In this we will get the parameters of the employee according to their designation",
				"operationId": "gethcmRoleParameters",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "designation_id",
						"in": "query",
						"description": "designation_id",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "hcmRoleParameter"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmRoleParameter"
				],
				"summary": "Assign the parameters according to the designation",
				"description": "insert  on the basis of its designation_id and params_id",
				"operationId": "CreatehcmRoleParameter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/InserthcmRoleParameter"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Inserted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmRoleParameter"
				],
				"summary": "update parameters according to the designation uplaoded in DB ",
				"description": "update the category, parameter in DB",
				"operationId": "UpdatehcmRoleParameter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdatehcmRoleParameter"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updation Successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmRoleParameter"
				],
				"summary": "delete roleparameter from DB ",
				"description": "delete roleparameters  from DB ",
				"operationId": "DeletehcmRoleParameter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeletehcmRoleParameter"
						}
					}
				],
				"responses": {
					"200": {
						"description": "deletion successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmParameter": {
			"get": {
				"tags": [
					"hcmParameter"
				],
				"summary": "This api gives the parameters",
				"description": "In this we will get all the parameters which is there in company",
				"operationId": "gethcmParameter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "params_id",
						"in": "query",
						"description": "enter parameter id",
						"required": false,
						"type": "string"
					},
					{
						"name": "used_by",
						"in": "query",
						"description": "enter used_by",
						"required": false,
						"type": "string"
					},
					{
						"name": "parameter_name",
						"in": "query",
						"description": "enter parameter name",
						"required": false,
						"type": "string"
					},
					{
						"name": "active",
						"in": "query",
						"description": "enter active",
						"required": false,
						"type": "string"
					},
					{
						"name": "is_common",
						"in": "query",
						"description": "enter is_common",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Parameters"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmParameter"
				],
				"summary": "Insert the parameters",
				"description": "insert the parameters and params_id and all the other details",
				"operationId": "CreatehcmParameter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/InserthcmParameter"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Inserted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmParameter"
				],
				"summary": "Update parameters  uplaoded in DB ",
				"description": "update the parameter in DB",
				"operationId": "UpdatehcmParameter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdatehcmParameter"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updation Successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmParameter"
				],
				"summary": "delete parameter from DB ",
				"description": "delete parameters  from DB ",
				"operationId": "DeletehcmParameter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeletehcmParameter"
						}
					}
				],
				"responses": {
					"200": {
						"description": "deletion successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmPerformancePlans": {
			"get": {
				"tags": [
					"hcmPerformancePlans"
				],
				"summary": "This api gives the  Performance plans",
				"description": "In this we will get all the Performance plans which is there in company",
				"operationId": "gethcmPlans",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "plan_id",
						"in": "query",
						"description": "enter plan id",
						"required": false,
						"type": "string"
					},
					{
						"name": "plan_name",
						"in": "query",
						"description": "enter plan name",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Performance Plans"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmPerformancePlans"
				],
				"summary": "Insert the Performance plans",
				"description": "insert the Performance plans and plan_id and all the other details",
				"operationId": "CreatehcmPerformancePlans",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/InserthcmPerformancePlans"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Inserted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmPerformancePlans"
				],
				"summary": "Update the Performance plans  uplaoded in DB ",
				"description": "update the Performance plans in DB",
				"operationId": "UpdatehcmPerformancePlans",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdatehcmPerformancePlans"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updation Successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmPerformancePlans"
				],
				"summary": "delete the Performance plans from DB ",
				"description": "delete the Performance plans  from DB ",
				"operationId": "DeletehcmPerformancePlans",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeletehcmPerformancePlans"
						}
					}
				],
				"responses": {
					"200": {
						"description": "deletion successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmEvaluate": {
			"get": {
				"tags": [
					"hcmEvaluate"
				],
				"summary": "GET details of the evaluated result  ",
				"description": "GET details of all the evaluated result of the employee from the DB",
				"operationId": "gethcmEvaluate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "email",
						"in": "query",
						"description": "enter email",
						"required": false,
						"type": "string"
					},
					{
						"name": "period_mode",
						"in": "query",
						"description": "enter period_mode",
						"required": false,
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "enter the start date",
						"required": false,
						"type": "string"
					},
					{
						"name": "end_date",
						"in": "query",
						"description": "enter the end_date",
						"required": false,
						"type": "string"
					},
					{
						"name": "plan_id",
						"in": "query",
						"description": "enter the plan_id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Result found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"hcmEvaluate"
				],
				"summary": "User get its own detail ",
				"description": "user get its own detail",
				"operationId": "PatchhcmEvaluate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "enter page no.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PatchhcmEvaluate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Result found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmEvaluate"
				],
				"summary": "Insert the user's evaluation",
				"description": "insert  on the basis of its email,designation_id,feedback,things_to_improve,parameters                                                                       ",
				"operationId": "CreatehcmEvaluate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/InserthcmEvaluate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Inserted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmEvaluate"
				],
				"summary": "update evaluated uplaoded in DB ",
				"description": "update evaluated evaluation result in DB",
				"operationId": "updatehcmEvaluate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdatehcmEvaluate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updation Successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmEvaluate"
				],
				"summary": "delete evaluated from DB ",
				"description": "delete evaluated evaluation result table from DB ",
				"operationId": "DeletehcmEvaluate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeletehcmEvaluate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "deletion successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmVisitorsPurpose": {
			"get": {
				"tags": [
					"hcmvisitorspurpose"
				],
				"summary": "GET details of purpose  ",
				"description": "GET details of purpose by user ",
				"operationId": "getpurpose",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Purpose Found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmvisitorspurpose"
				],
				"summary": "Insert  purpose ",
				"description": "insert purpose on the basis of its purpose_name,purpose_description and status",
				"operationId": "createpurpose",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Insertpurpose"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Purpose added Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmvisitorspurpose"
				],
				"summary": "update purpose ",
				"description": "update purpose on the basis of its purpose_name,purpose_description,status",
				"operationId": "Updatepurpose",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Updatepurpose"
						}
					}
				],
				"responses": {
					"200": {
						"description": "purpose Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"hcmvisitorspurpose"
				],
				"summary": "Get purpose ",
				"description": "Search purpose on the basis of its purpose_id",
				"operationId": "getVisitorPurpose",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Searchpurpose"
						}
					}
				],
				"responses": {
					"200": {
						"description": "purpose found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"hcmvisitorspurpose"
				],
				"summary": "delete purpose",
				"description": "delete purpose on the basis of its purpose_id",
				"operationId": "Deletepurpose",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Deletepurpose"
						}
					}
				],
				"responses": {
					"200": {
						"description": "purpose Deleted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmVisitorsLogs": {
			"get": {
				"tags": [
					"hcmvisitorslogs"
				],
				"summary": "GET log of user ",
				"description": "See log of users",
				"operationId": "getlogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "enter status",
						"required": false,
						"type": "string"
					},
					{
						"name": "phone_no",
						"in": "query",
						"description": "enter phone no.",
						"required": false,
						"type": "string"
					},
					{
						"name": "purpose_id",
						"in": "query",
						"description": "enter purpose id",
						"required": false,
						"type": "string"
					},
					{
						"name": "user_name",
						"in": "query",
						"description": "enter username",
						"required": false,
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "enter start_date",
						"required": false,
						"type": "string"
					},
					{
						"name": "end_date",
						"in": "query",
						"description": "enter end_date",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "log found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmvisitorslogs"
				],
				"summary": "Add logs",
				"description": "Create logs",
				"operationId": "createlogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Createlogs"
						}
					}
				],
				"responses": {
					"200": {
						"description": "logs added Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"hcmvisitorslogs"
				],
				"summary": "Update logs ",
				"description": "Update logs",
				"operationId": "updatelogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Updatelogs"
						}
					}
				],
				"responses": {
					"200": {
						"description": "logs Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"hcmvisitorslogs"
				],
				"summary": "delete logs ",
				"description": "delete logs on the basis of log_id",
				"operationId": "deletelogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Deletelogs"
						}
					}
				],
				"responses": {
					"200": {
						"description": "logs Deleted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"hcmvisitorslogs"
				],
				"summary": "Find logs ",
				"description": "Find logs",
				"operationId": "findlogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Searchlogs"
						}
					}
				],
				"responses": {
					"200": {
						"description": "logs Found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			}
		},
		"/yearlyLeaveTrigger": {
			"get": {
				"tags": [
					"get all employees remaining leaves"
				],
				"summary": "get all employees remaining leaves at the end of a year",
				"description": "get all employees remaining leaves at the end of a year.",
				"operationId": "getRemainingLeave",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": false,
						"type": "string"
					},
					{
						"name": "year",
						"in": "query",
						"required": false,
						"description": "filter by year",
						"type": "string"
					},
					{
						"name": "email",
						"in": "query",
						"required": false,
						"description": "filter by email",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/ems": {
			"get": {
				"tags": [
					"get all ems detail"
				],
				"summary": "get all ems detail.",
				"description": "Fetch all the ems detail.",
				"operationId": "getEmsDetail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "query",
						"required": true,
						"description": "Enter user name",
						"type": "string"
					},
					{
						"name": "smtp_search",
						"in": "query",
						"required": false,
						"description": "set smtp true for fetch smtp details",
						"type": "string"
					},
					{
						"name": "macro_search",
						"in": "query",
						"required": true,
						"description": "set macro true for fetch macro details",
						"type": "string"
					},
					{
						"name": "category_search",
						"in": "query",
						"required": false,
						"description": "set category true for fetch category details",
						"type": "string"
					},
					{
						"name": "template_search",
						"in": "query",
						"required": false,
						"description": "set template true for fetch template details",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"delete data"
				],
				"summary": "User can delete the smtp, macro, template and category",
				"description": "Delete the project details\n",
				"operationId": "deleteEMSDetail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteEMSDetail"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"update EMS Details"
				],
				"summary": "User can update EMS details",
				"description": "User can update EMS detail\n",
				"operationId": "updateEMSDetail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateEMSDetail"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/tms_project": {
			"get": {
				"tags": [
					"get all project detail"
				],
				"summary": "get all project detail.",
				"description": "Fetch all the project detail.",
				"operationId": "getProjectDetail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "query",
						"required": true,
						"description": "Enter user name",
						"type": "string"
					},
					{
						"name": "projectName",
						"in": "query",
						"required": true,
						"description": "Enter project name",
						"type": "string"
					},
					{
						"name": "type",
						"in": "query",
						"required": true,
						"description": "Enter project type",
						"type": "string"
					},
					{
						"name": "search_by_task_title",
						"in": "query",
						"required": false,
						"description": "Enter the task title for search task",
						"type": "string"
					},
					{
						"name": "filter_task_on_type",
						"in": "query",
						"required": false,
						"description": "Enter task type",
						"type": "string"
					},
					{
						"name": "task_type",
						"in": "query",
						"required": false,
						"description": "Enter task type",
						"type": "string"
					},
					{
						"name": "search_by_project_name",
						"in": "query",
						"required": false,
						"description": "Enter project name",
						"type": "string"
					},
					{
						"name": "search_project_by_id",
						"in": "query",
						"required": false,
						"description": "Enter project id",
						"type": "string"
					},
					{
						"name": "task_search",
						"in": "query",
						"required": false,
						"description": "Enter task search true for fetch all task which is created by user",
						"type": "string"
					},
					{
						"name": "project_search",
						"in": "query",
						"required": false,
						"description": "Set true if search project details",
						"type": "string"
					},
					{
						"name": "task_link_search",
						"in": "query",
						"required": false,
						"description": "Set true if fetch all task which is link",
						"type": "string"
					},
					{
						"name": "project_id",
						"in": "query",
						"required": false,
						"description": "Take project id for fetch all task of particular project",
						"type": "string"
					},
					{
						"name": "assign_task_user",
						"in": "query",
						"required": false,
						"description": "Set as true for fetch all task with the user list",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"create new project"
				],
				"summary": "It create new project, select team lead and team members for the project.",
				"description": "Create a new project.\n",
				"operationId": "createProject",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/postCreateProject"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"delete project request"
				],
				"summary": "User can delete the project",
				"description": "Delete the project details\n",
				"operationId": "deleteProjectDetail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteProjectDetail"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"update projectDetails"
				],
				"summary": "User can update project details and task",
				"description": "User can update project detail\n",
				"operationId": "updateProjDetail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateProjDetail"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/tms_assign_task": {
			"get": {
				"tags": [
					"fetch all project assign task"
				],
				"summary": "fetch all project assign detail.",
				"description": "Fetch all project assign task detail.",
				"operationId": "getProjectAssignTaskDetail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "query",
						"required": true,
						"description": "Enter user name",
						"type": "string"
					},
					{
						"name": "projectName",
						"in": "query",
						"required": false,
						"description": "Enter the project name",
						"type": "string"
					},
					{
						"name": "type",
						"in": "query",
						"required": false,
						"description": "Enter the project type",
						"type": "string"
					},
					{
						"name": "task_assign_by",
						"in": "query",
						"required": false,
						"description": "Enter the user who has assign the task",
						"type": "string"
					},
					{
						"name": "task_assign_to",
						"in": "query",
						"required": false,
						"description": "Enter the to whom user task assign ",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"assign task to the new user"
				],
				"summary": "It assign the task to the new user.",
				"description": "It assign the task to the new user.\n",
				"operationId": "assignNewProjectTaskToUser",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/assignNewProjectTaskToUser"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"update assign task to the new user"
				],
				"summary": "It assign the task to the new user.",
				"description": "It assign the task to the new user.\n",
				"operationId": "updateTask",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTask"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"delete assign task"
				],
				"summary": "User can delete the assign task",
				"description": "Delete the assign task\n",
				"operationId": "deleteAssignTaskDetail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteAssignTaskDetail"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/tms_task_comment": {
			"get": {
				"tags": [
					"fetch all comment against particular task"
				],
				"summary": "fetch all comment against particular task.",
				"description": "Fetch all comment against particular task.",
				"operationId": "getCommentOnTask",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "query",
						"required": true,
						"description": "Enter user name",
						"type": "string"
					},
					{
						"name": "projectName",
						"in": "query",
						"required": true,
						"description": "Enter table name",
						"type": "string"
					},
					{
						"name": "type",
						"in": "query",
						"required": true,
						"description": "Enter table type",
						"type": "string"
					},
					{
						"name": "proj_task_id",
						"in": "query",
						"required": false,
						"description": "Enter proj_task_id",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"create new comment on task"
				],
				"summary": "The user create comment on task.",
				"description": "The user create comment on task.\n",
				"operationId": "addNewCommentForTask",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addNewCommentForTask"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"user update the comment"
				],
				"summary": "The user the comment",
				"description": "The user update comment.\n",
				"operationId": "updateUserComment",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateUserComment"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/tms_work_log": {
			"get": {
				"tags": [
					"fetch all user work log"
				],
				"summary": "fetch all user work log.",
				"description": "Fetch all user work log.",
				"operationId": "getUserWorkLog",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "query",
						"required": true,
						"description": "Enter user name",
						"type": "string"
					},
					{
						"name": "search_by_user",
						"in": "query",
						"required": false,
						"description": "Enter user name for search the log",
						"type": "string"
					},
					{
						"name": "search_by_issue_id",
						"in": "query",
						"required": false,
						"description": "Enter issue id or task id for search the log",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"create new entry for user log"
				],
				"summary": "The user create new entry for user log",
				"description": "The user create new entry for user log.\n",
				"operationId": "addNewUserWorkLog",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addNewUserWorkLog"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"user update the work log"
				],
				"summary": "The user the work log",
				"description": "The user update work log.\n",
				"operationId": "updateWorkLog",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateWorkLog"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/tms_task_type": {
			"get": {
				"tags": [
					"fetch all task type"
				],
				"summary": "fetch all task type.",
				"description": "Fetch all task type.",
				"operationId": "getAllTaskType",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "query",
						"required": true,
						"description": "Enter user name",
						"type": "string"
					},
					{
						"name": "search_by_task_type",
						"in": "query",
						"required": false,
						"description": "Enter user name for search the log",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"create a new task type"
				],
				"summary": "The user create a task type",
				"description": "The user create a link the current task with the existing task.\n",
				"operationId": "addTaskType",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addTaskType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"user update task type"
				],
				"summary": "The user task type",
				"description": "The user task type.\n",
				"operationId": "updateTaskType",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTaskType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"delete task type"
				],
				"summary": "User can delete the task type",
				"description": "User can delete the task type\n",
				"operationId": "deleteTaskType",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteTaskType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/dashboard": {
			"get": {
				"tags": [
					"dashboard (employee's approved leave request)"
				],
				"summary": "employee will get their approved leave request.",
				"description": "employee will get their approved request.",
				"operationId": "approvedList",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "account detail with permission detail"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"dashboard (pending request for admin)"
				],
				"summary": "admin will get pending requestin his dashboard",
				"description": "pending request list.\n",
				"operationId": "getpending",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/getBirthday"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"dashboard (admin will list employee on leave)"
				],
				"summary": "admin will get list of employee's who will be on leave in upcomming 10 days",
				"description": "approved request list.\n",
				"operationId": "getemp",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/getBirthday"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/attendance_approval": {
			"patch": {
				"tags": [
					"attendance_approval"
				],
				"summary": "check attendance in time",
				"description": "get in time\n",
				"operationId": "get",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/get"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"attendance_approval"
				],
				"summary": "apply miss checkin checkout",
				"description": "apply miss checkin checkout\n",
				"operationId": "applyMissCheckin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/missCheckInApply"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"attendance_approval"
				],
				"summary": "update status of miss chechin checkout request",
				"description": "update status of miss chechin checkout request\n",
				"operationId": "updateMissCheckin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateCheckin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"attendance_approval"
				],
				"summary": "delete miss chechin checkout request",
				"description": "delete miss chechin checkout request\n",
				"operationId": "deleteRequest",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"attendance_approval"
				],
				"summary": "get missed checkin checkout request",
				"description": "get missed checkin checkout request",
				"operationId": "getRequest",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "account detail with permission detail"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/account": {
			"get": {
				"tags": [
					"getAccount Type"
				],
				"summary": "you can get the permission type of existing account.",
				"description": "you can differentiate here account type either superadmin or user or admin.",
				"operationId": "accountType",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "account detail with permission detail"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"add profilePic"
				],
				"summary": "user can update or add his profile pic",
				"description": "add profile pic\n",
				"operationId": "addprofile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addProfile"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"get upcomming birthday list(within 3-days)"
				],
				"summary": "user can get upcomming birthdays of emmployee's in his company.",
				"description": "get birthday detail\n",
				"operationId": "getBirthday",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/getBirthday"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"send birthdayWish"
				],
				"summary": "send birthday wish to employee by mail.",
				"description": "send birthday wish to employee by mail.\n",
				"operationId": "sendMail",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/getBirthday"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"delete leave request"
				],
				"summary": "admin can delete leave requests",
				"description": "delete leave request\n",
				"operationId": "deleReq",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteLeave"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/log": {
			"get": {
				"tags": [
					"search & count (admin)"
				],
				"summary": "search and count api.",
				"description": "search & count.",
				"operationId": "searchCount",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "context",
						"in": "query",
						"description": "enter your role",
						"required": true,
						"type": "string"
					},
					{
						"name": "model",
						"in": "query",
						"required": true,
						"description": "enter model name",
						"type": "string"
					},
					{
						"name": "value",
						"in": "query",
						"description": "enter model value",
						"type": "string"
					},
					{
						"name": "count",
						"in": "query",
						"description": "enter model to count",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"users reported to an employee"
				],
				"summary": "list of users reporting of a employee",
				"description": "list of users reporting of a employee\n",
				"operationId": "reportingUsers",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/reportingUsers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/exportAttendance": {
			"get": {
				"tags": [
					"ExportAttendance (admin)"
				],
				"summary": "export attendance using filter.",
				"description": "export attendance using filter",
				"operationId": "exportAttendance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "query",
						"description": "enter user email",
						"type": "string"
					},
					{
						"name": "team",
						"in": "query",
						"description": "enter team name",
						"type": "string"
					},
					{
						"name": "department",
						"in": "query",
						"description": "filter department-wise",
						"type": "string"
					},
					{
						"name": "startTime",
						"in": "query",
						"description": "enter startTime",
						"type": "string"
					},
					{
						"name": "endTime",
						"in": "query",
						"description": "enter endTime",
						"type": "string"
					},
					{
						"name": "download",
						"in": "query",
						"description": "enter true or false",
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"ExportAttendance (user)"
				],
				"summary": "export attendance using filter.",
				"description": "export attendance using filter",
				"operationId": "exportAttendances",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/exportAttendance"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/module": {
			"post": {
				"tags": [
					"module (super-admin)"
				],
				"summary": "super-admin can create a module with permission.",
				"description": "if you have permission of \"fullaccess\" then only you are able to create module.\n",
				"operationId": "addCompany",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addModule"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"module (super-admin)"
				],
				"summary": "super-admin can add module in company.",
				"description": "if you have permission of \"fullaccess\" then only you are able to add module in company.\n",
				"operationId": "upDelModule",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateDeleteModule"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"module (super-admin)"
				],
				"summary": "super-admin can remove module from company.",
				"description": "if you have permission of \"fullaccess\" then only you are able to remove module from company.\n",
				"operationId": "DelModule",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateDeleteModule"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"module (super-admin)"
				],
				"summary": "superadmin list out all modules and search also.",
				"description": "list modules.",
				"operationId": "listCompany",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "searchValue",
						"in": "query",
						"description": "enter search value",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/company": {
			"post": {
				"tags": [
					"company (super-admin)"
				],
				"summary": "super-admin can create a company.",
				"description": "if you have permission of \"fullaccess\" then only you are able to create company.\n",
				"operationId": "addcompany",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addCompany"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"company (super-admin)"
				],
				"summary": "super-admin can update a company.",
				"description": "if you have permission of \"fullaccess\" then only you are able to update company.\n",
				"operationId": "updateCompany",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateCompany"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"company (super-admin)"
				],
				"summary": "superadmin list out all company.",
				"description": "list companies.",
				"operationId": "listcompany",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "searchValue",
						"in": "query",
						"description": "enter search value",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page number",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"company (super-admin)"
				],
				"summary": "super-admin can delete a company by passing their id.",
				"description": "delete company if you have full-access permission.\n",
				"operationId": "deleteRequest1",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteCompany"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/holiday": {
			"post": {
				"tags": [
					"holiday"
				],
				"summary": "admin can add holidays.",
				"description": "if you have permission of \"companyaccess\" then only you are able to add holidays.\n",
				"operationId": "addholiday",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addHoliday"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"holiday"
				],
				"summary": "admin can update a holiday details.",
				"description": "if you have permission of \"companyaccess\" then only you are able to update company.\n",
				"operationId": "updateHoliday",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateHoliday"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"holiday"
				],
				"summary": "end-user list all holidays.",
				"description": "list holidays.",
				"operationId": "listholidays",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "yearFilter",
						"in": "query",
						"description": "enter year",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"holiday"
				],
				"summary": "admin can delete a holiday detail by passing their id.",
				"description": "delete holiday if you have company-access permission.\n",
				"operationId": "deleteHoliday",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteHoliday"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/attendanceStatusUpdate": {
			"post": {
				"tags": [
					"attendanceStatusUpdate"
				],
				"summary": "attendance status mark trigger.",
				"description": "attendance status mark trigger.\n",
				"operationId": "markStatus",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/markStatus"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"attendanceStatusUpdate"
				],
				"summary": "employees leeves and remaining leaves counter.",
				"description": "employees leeves and remaining leaves counter.",
				"operationId": "leaveCounter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "fromDate",
						"in": "query",
						"description": "enter start date",
						"required": false,
						"type": "string"
					},
					{
						"name": "toDate",
						"in": "query",
						"description": "enter end date",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/shift": {
			"post": {
				"tags": [
					"shift Times"
				],
				"summary": "admin can add shifts.",
				"description": "if you have permission of \"companyaccess\" then only you are able to add shifts.\n",
				"operationId": "addshift",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addshift"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"shift Times"
				],
				"summary": "admin can update a shifts details.",
				"description": "if you have permission of \"companyaccess\" then only you are able to update shifts.\n",
				"operationId": "updateshift",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateshift"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"shift Times"
				],
				"summary": "end-user list all shifts.",
				"description": "list sifts.",
				"operationId": "listshifts",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "mode",
						"in": "query",
						"required": false,
						"type": "string",
						"enum": [
							"roaster",
							"shift"
						]
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"shift Times"
				],
				"summary": "admin can delete a shift detail by passing their id.",
				"description": "delete shift if you have company-access permission.\n",
				"operationId": "deleteshift",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteshift"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/announcement": {
			"post": {
				"tags": [
					"announcement"
				],
				"summary": "admin can add new announcement.",
				"description": "if you have permission of \"companyaccess\" or create Employee then you van add.\n",
				"operationId": "addannouncement",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addAnnouncement"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"announcement"
				],
				"summary": "admin can update a existing announcement details.",
				"description": "if you have permission of \"companyaccess\" or C:Employee then only you are able to update announcements.\n",
				"operationId": "updateAnnouncement",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateAnnouncement"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"announcement"
				],
				"summary": "end-user list all announcement.",
				"description": "list announcements.",
				"operationId": "listAnnouncements",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"announcement"
				],
				"summary": "admin can delete announcement detail by passing their id.",
				"description": "delete announcement if you have company-access permission.\n",
				"operationId": "deleteAnnouncement",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteAnnouncement"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/assets": {
			"post": {
				"tags": [
					"assets"
				],
				"summary": "admin can add new assets.",
				"description": "if you have permission of \"C:Assets\" or \"OMPANYACCESS\" then you can create new assets.\n",
				"operationId": "addAssets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addAssets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"assets"
				],
				"summary": "admin can update a existing assets details.",
				"description": "if you have permission of \"companyaccess\" or U:Assets then only you are able to update assets.\n",
				"operationId": "updateAssets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateAssets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"assets"
				],
				"summary": "assets list with assigned employees",
				"description": "list Assets.",
				"operationId": "listAssets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"description": "search by uniquecode",
						"required": false,
						"type": "string"
					},
					{
						"name": "email",
						"in": "query",
						"description": "filter assets by email",
						"required": false,
						"type": "string"
					},
					{
						"name": "category",
						"in": "query",
						"description": "filter by category",
						"required": false,
						"type": "string",
						"enum": [
							"Hardware",
							"Software"
						]
					},
					{
						"name": "mode",
						"in": "query",
						"description": "filter by mode",
						"required": false,
						"type": "string",
						"enum": [
							"all",
							"assigned",
							"unassigned"
						]
					},
					{
						"name": "count",
						"in": "query",
						"required": false,
						"type": "string",
						"enum": [
							"true",
							"false"
						]
					},
					{
						"name": "fromDate",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "toDate",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page each page will contain 10 request.",
						"required": false,
						"type": "string",
						"default": "1"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"assets"
				],
				"summary": "admin can delete assets detail by passing their id.",
				"description": "delete assets if you have company-access permission.\n",
				"operationId": "deleteAsset",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteAssets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"assets"
				],
				"summary": "admin can get update details of any assets.",
				"description": "admin can get update details of any assets.\n",
				"operationId": "assetInfo",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/infoAssets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/assignAssets": {
			"post": {
				"tags": [
					"assignAssets"
				],
				"summary": "admin can assign asset to any employee.",
				"description": "admin can assign asset to any employee.\n",
				"operationId": "assignAssets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/assignAssets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"assignAssets"
				],
				"summary": "admin can update details of assigny for asset.",
				"description": "admin can update details of assigny for asset.\n",
				"operationId": "updateAssignAsset",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateAssignAssets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"assignAssets"
				],
				"summary": "assets list with assigned employees",
				"description": "list Assets.",
				"operationId": "listEmployeeAssets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"assignAssets"
				],
				"summary": "admin can unassign assets.",
				"description": "admin can unassign assets.\n",
				"operationId": "unassignAsset",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/unassignAsset"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"assignAssets"
				],
				"summary": "admin can get assets assign history",
				"description": "admin can get assets assign history\n",
				"operationId": "assetAssignInfo",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/assetAssignInfo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/assetTickets": {
			"post": {
				"tags": [
					"assetTickets"
				],
				"summary": "employee can genrate assets ticket.",
				"description": "employee can genrate assets ticket.\n",
				"operationId": "assetTicketAdd",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/assetTicketAdd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"assetTickets"
				],
				"summary": "employee can update his issue.",
				"description": "employee can update his issue.\n",
				"operationId": "updateTicket",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateTicket"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"assetTickets"
				],
				"summary": "admin can list tickets",
				"description": "admin can list tickets",
				"operationId": "listTicketsByAdmin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "email",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "fromDate",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "toDate",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"assetTickets"
				],
				"summary": "admin can delete tickets.",
				"description": "admin can delete tickets.\n",
				"operationId": "deleteTickets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteTickets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"assetTickets"
				],
				"summary": "employee can list his tickets",
				"description": "employee can list his tickets\n",
				"operationId": "ticketListByAdmin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/emoloyeeTickets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/assetsMaintenance": {
			"post": {
				"tags": [
					"assetsMaintenance"
				],
				"summary": "add assetsMaintenance.",
				"description": "assetsMaintenance\n",
				"operationId": "assetMain",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/assetMain"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"assetsMaintenance"
				],
				"summary": "update details",
				"description": "updateDetails\n",
				"operationId": "updateMain",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateMain"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"assetsMaintenance"
				],
				"summary": "admin can list assets maintenance details",
				"description": "admin can list assets maintenance details",
				"operationId": "listMain",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"assetsMaintenance"
				],
				"summary": "admin can delete asset maintenance details.",
				"description": "admin can delete asset maintenance details.\n",
				"operationId": "deleteMain",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteMain"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/compoff": {
			"post": {
				"tags": [
					"comp-off"
				],
				"summary": "employee can request for the comp-off.",
				"description": "employee can request for the comp-off\n",
				"operationId": "addcomp",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addcomp"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"comp-off"
				],
				"summary": "admin and reporting person can update compoff request status.",
				"description": "approve and reject compOff request\n",
				"operationId": "updatecomp",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updatecomp"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"comp-off"
				],
				"summary": "admin and reporting person will get comp-off request.",
				"description": "list compoff.",
				"operationId": "listcomp",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"comp-off"
				],
				"summary": "admin can delete compOff request by passing their id.",
				"description": "delete compOff request if you have company-access permission.\n",
				"operationId": "deletecomp",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteAssets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"comp-off"
				],
				"summary": "admin can get list of compoff and missed checkin attendance.",
				"description": "admin can get list of compoff and missed checkin attendance.\n",
				"operationId": "adminInfo",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/attendance_mark_admin": {
			"get": {
				"tags": [
					"attendance admin listing"
				],
				"summary": "admin can list monthly attendance of each employee.",
				"description": "admin can list monthly attendance of each employee.",
				"operationId": "listAttendance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "status",
						"in": "query",
						"description": "filter request by status",
						"required": true,
						"type": "string"
					},
					{
						"name": "month",
						"in": "query",
						"description": "enter month",
						"required": true,
						"type": "string"
					},
					{
						"name": "year",
						"in": "query",
						"description": "enter year",
						"required": true,
						"type": "string"
					},
					{
						"name": "companyId",
						"in": "query",
						"description": "enter companyId",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page each page will contain 10 request.",
						"required": true,
						"type": "string",
						"default": "1"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/viewEmployee"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/leaveApplication": {
			"post": {
				"tags": [
					"LeaveSection(User)"
				],
				"summary": "user can request for leave.",
				"description": "user can create a application for their leave and all mandatory fields are required.\n * for shortLeave and and halfDay for a day only from date is required\n",
				"operationId": "applyLeave",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/applyLeave"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"get": {
				"tags": [
					"LeaveSection(User)"
				],
				"summary": "employee can view their requests and apply filter also.",
				"description": "with out using filter it will return all the request of that user.",
				"operationId": "listRequestUser",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "status",
						"in": "query",
						"description": "filter request by status",
						"required": false,
						"type": "string"
					},
					{
						"name": "leaveType",
						"in": "query",
						"description": "filter request by leave Type",
						"required": false,
						"type": "string"
					},
					{
						"name": "fromDate",
						"in": "query",
						"description": "filter request by date interval enter startDate",
						"required": false,
						"type": "string",
						"default": "2020-01-07"
					},
					{
						"name": "toDate",
						"in": "query",
						"description": "filter request by date interval enter endDate",
						"required": false,
						"type": "string",
						"default": "2020-01-10"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page each page will contain 10 request.",
						"required": false,
						"type": "string",
						"default": "1"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/viewEmployee"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"LeaveSection(User)"
				],
				"summary": "employee can cancel their leave request before leave date.",
				"description": "employee can cancel their leave Pending and approved requests before leave date.\n",
				"operationId": "cancelRequest",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/cancelRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"LeaveSection(Admin)"
				],
				"summary": "admin can listout leave requests of employees.",
				"description": "admin can list all request and also he can use filters to fetch according to him.\n* <b>date filter will work simultaneously. it will return data within a date interval.</b>\n * <b>if superadmin then context will go with blank string and admin have to enter their role in context field.</b>\n",
				"operationId": "listLeaveAdmin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listLeaveAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"LeaveSection(Admin)"
				],
				"summary": "admin can approve/reject or delete the request.",
				"description": "admin can change the status of employees request to <b>approved or reject</b>.\n* <b>admin can delete request also by sending property of status Delete.</b>\n* <b>if superadmin then context will go with blank string and admin have to enter their role in context field.</b>\n* <b>commentInApproval will be there with status approved and reasonForRejection will go if status is reject </b>\n",
				"operationId": "updateStatus",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateStatus"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/admin": {
			"post": {
				"tags": [
					"admin(Web)"
				],
				"summary": "update any model by providing their name.",
				"description": "update fields of any model as a admin give context blank if u are not a admin then provide your role in context, in changes provide model id and other fields that you want to update.\n",
				"operationId": "updateadmin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateadmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/updateadminresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"admin(Web)"
				],
				"summary": "add a new model or add model related to another model",
				"description": "create new Model,create new model and relate with existing model give context blank if you are a admin otherwise provide your role if you have a permission to create that model then you can create.",
				"operationId": "addadmin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addadmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/addadminresult"
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"admin(Web)"
				],
				"summary": "delete connected permission Model or delete permission Model",
				"description": "delete a permission model by providing your role in context and modelId.if admin then leave context blank, and from this you can also delete a relationship between two models.",
				"operationId": "deleteadmin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteadmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/deleteadminresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"admin(Web)"
				],
				"summary": "list models based on access",
				"description": "based on the access users can view list of models and by providingconnected true you can get the list of connected models.\nprovide role in context if admin then leave blank.\n",
				"operationId": "listadmin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listadmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/listadminresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/adminUpdate": {
			"post": {
				"tags": [
					"adminUpdate"
				],
				"summary": "admin can update employee's leave manually.",
				"description": "admin can update employee's leave manually.\n",
				"operationId": "adminUpdate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/adminUpdate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"adminUpdate"
				],
				"summary": "add employee to new designation.",
				"description": "add employee to new designation.",
				"operationId": "addDesignation",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateDesignation"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"adminUpdate"
				],
				"summary": "get employees yearly and applicable leaves",
				"description": "get employees yearly and applicable leaves\n",
				"operationId": "getadmin",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/getAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/extra": {
			"get": {
				"tags": [
					"get employee's consumed leave days"
				],
				"summary": "api to get consumed leave days",
				"description": "consume leave days of a employee",
				"operationId": "countDays",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "leaveName",
						"in": "query",
						"description": "enter leave-type name",
						"required": true,
						"type": "string"
					},
					{
						"name": "fromDate",
						"in": "query",
						"description": "enter year startDate",
						"type": "string",
						"required": true
					},
					{
						"name": "toDate",
						"in": "query",
						"description": "enter year endDate",
						"type": "string",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"extra"
				],
				"summary": "admin can change employee's department",
				"description": "admin can change employee's department\n",
				"operationId": "switchDept",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/switchDept"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"extra"
				],
				"summary": "delete employees personal info.",
				"description": "delete employees personal info.",
				"operationId": "deleteInfo",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteInfo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"extra"
				],
				"summary": "number of designation count in any department",
				"description": "number of designation count in any department\n",
				"operationId": "countDes",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/countDes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/document": {
			"post": {
				"tags": [
					"document"
				],
				"summary": "upload document",
				"description": "upload document\n",
				"operationId": "addDoc",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addDoc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"document"
				],
				"summary": "delete document",
				"description": "delete document",
				"operationId": "deleteDoc",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteDoc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"document"
				],
				"summary": "get employees document",
				"description": "get employees document\n",
				"operationId": "getDoc",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/getDoc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successfull",
						"schema": {
							"type": "object",
							"properties": {
								"success": {
									"type": "string",
									"example": "operation successfull!"
								}
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/leave": {
			"get": {
				"tags": [
					"leave"
				],
				"summary": "view leave type of your company",
				"description": "View basic leave types",
				"operationId": "viewLeave",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"leave"
				],
				"summary": "list out the leave count in user's profile.",
				"description": "list out leave count of employee",
				"operationId": "listleave",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listLeave"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/listadminresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"leave"
				],
				"summary": "company admin can edil employee's leave.",
				"description": "update leaves of employee",
				"operationId": "updateleave",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateLeave"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/listadminresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"leave"
				],
				"summary": "get applicable leaves.",
				"description": "employee's applicable leaves",
				"operationId": "leave",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/applicableLeave"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"leave"
				],
				"summary": "desable company leave from leave setting.",
				"description": "desable leave",
				"operationId": "leavedesable",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/desableLeave"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/employee": {
			"get": {
				"tags": [
					"employee"
				],
				"summary": "view employee profile data",
				"description": "View basic employee details",
				"operationId": "viemEmployee",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "query",
						"description": "username",
						"required": false,
						"type": "string"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "select mode",
						"type": "string",
						"enum": [
							"profile",
							"address",
							"emergencyContact",
							"personalInfo",
							"bankInfo",
							"familyInfo",
							"educationInfo",
							"experience"
						]
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/viewEmployee"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"employee"
				],
				"summary": "invite new user",
				"description": "by passing mandatory fields you can invite new users if u              have permission to create user or you are a superadmin.",
				"operationId": "inUser",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/inviteUser"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/listadminresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"employee"
				],
				"summary": "filter users list of your company by designation.",
				"description": "if you have full companyAccess or R:User permission then you are able to get user's list of your company.",
				"operationId": "listUser",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UserFilter"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"employee"
				],
				"summary": "update Employee details",
				"description": "Update employee details",
				"operationId": "updateEmployee",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "fields to be updated",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateEmployee"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"employee"
				],
				"summary": "employee soft delete",
				"description": "you can delete employee from cognito then he can not able to login.",
				"operationId": "softDeleteEmployee",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "fields to be updated",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteEmployee"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/cognitoauth": {
			"get": {
				"tags": [
					"login"
				],
				"summary": "regenrate your token if token is expired.",
				"description": "If current id token expire users can refresh their token by passing their userpool, clientId and their refresh token.\n",
				"operationId": "refresh",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userpool",
						"in": "query",
						"description": "userpool",
						"required": true,
						"type": "string"
					},
					{
						"name": "RefreshToken",
						"in": "query",
						"description": "refreshtoken",
						"required": true,
						"type": "string"
					},
					{
						"name": "clientId",
						"in": "query",
						"description": "clientId",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/loginresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"login"
				],
				"summary": "login to the application get tokens.",
				"description": "user can login and get token after successfully loged in they will get id-token, refresh-token and access token.\n",
				"operationId": "login",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/login"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/loginresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"login"
				],
				"summary": "here,new users can register themselves.",
				"description": "New User OR invited user can signup here. THis will make u inactive unless approve via superadmin.\n",
				"operationId": "signup",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/signup"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/signupresult"
							}
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"login"
				],
				"summary": "if you forgot your password then request for new one.",
				"description": "If user forgot the password. he can apply to put another password using this first he will select forgot mode and then fill all required info.\nafter executing the payload you will get a confirmation code in your e-mail. then change the mode forgot to confirm and put the confirmation code and enter a new password and after entering other required field press enter your password will be changed.\nresend mode is there if you don't receive the confirmation code then resend the request.\n",
				"operationId": "delete",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/forgotconfirm"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/loginresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"login"
				],
				"summary": "allow user to change their password.",
				"description": "user can change their passowrd by passing these three required fields.\nyou will get access token after login.\n",
				"operationId": "changepassword",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/changepassword"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": "#/definitions/loginresult"
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			}
		},
		"/attendance_checkincheckout": {
			"post": {
				"tags": [
					"attendence"
				],
				"summary": "attedndance checkin and checkout.",
				"description": "employee can checkin and checkout\n",
				"operationId": "attendence_checkincheckout",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/attendancecheck"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": ""
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/attendance_markattendance": {
			"patch": {
				"tags": [
					"attendance"
				],
				"summary": "allow user to change their password.",
				"description": "user can change their passowrd by passing these three required fields.\nyou will get access token after login.\n",
				"operationId": "attendance_mark",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/attendancemark"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria",
						"schema": {
							"$ref": ""
						}
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/trigger": {
			"put": {
				"tags": [
					"account"
				],
				"summary": "cloudwatch event trigger",
				"description": "* event trigger\n",
				"operationId": "triggerput",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/eventTrigger"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"errormessage": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/emsCatSubcat": {
			"get": {
				"tags": [
					"email management"
				],
				"summary": "Get count related data",
				"description": "* Get count for different requirements\n",
				"operationId": "emsCatSubCatGet",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "mode",
						"in": "query",
						"description": "mode",
						"type": "string",
						"enum": [
							"getCountOfEmailInCat",
							"getSubModulesWithPermissions",
							"getTotalCountOfModel",
							"getAccessBasedCount"
						]
					},
					{
						"name": "modelId",
						"in": "query",
						"description": "enter model id here",
						"type": "number"
					},
					{
						"name": "modelName",
						"in": "query",
						"description": "enter model name here",
						"type": "string"
					},
					{
						"name": "context",
						"in": "query",
						"description": "enter user's role name",
						"type": "string"
					},
					{
						"name": "moduleId",
						"in": "query",
						"description": "enter parent module Id to get submodules and it's permissions",
						"type": "string"
					},
					{
						"name": "moduleName",
						"in": "query",
						"description": "enter module name here",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"email management"
				],
				"summary": "Company admin can update respective models",
				"description": "* Company admin can update respective models.\n* Admin can update respective models based on permission.\n",
				"operationId": "emsCatSubCatUpdate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "update successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"email management"
				],
				"summary": "Company admin can add respective models",
				"description": "* Company admin can add respective models.\n* Admin can add respective models based on permission.\n",
				"operationId": "emsCatSubCatAdd",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"email management"
				],
				"summary": "Company admin can delete respective models",
				"description": "* Company admin can delete respective models.\n* Admin can delete respective models based on permission.\n",
				"operationId": "emsCatSubCatDelete",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"email management"
				],
				"summary": "Company admin can list respective models",
				"description": "* Company admin can list respective models.\n* Admin can list respective models based on permission.\n",
				"operationId": "emsCatSubCatList",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listModelByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "data available"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/rmsCat": {
			"get": {
				"tags": [
					"cloudwatch rule management"
				],
				"summary": "Get count and submodule related data",
				"description": "* Get count for different requirements\n",
				"operationId": "rmsCatGet",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "mode",
						"in": "query",
						"description": "mode",
						"type": "string",
						"enum": [
							"getTotalCountOfModel",
							"getSubModulesWithPermissions",
							"getAccessBasedCount"
						]
					},
					{
						"name": "modelId",
						"in": "query",
						"description": "enter model id here",
						"type": "number"
					},
					{
						"name": "modelName",
						"in": "query",
						"description": "enter model name here",
						"type": "string"
					},
					{
						"name": "context",
						"in": "query",
						"description": "enter user's role name",
						"type": "string"
					},
					{
						"name": "moduleId",
						"in": "query",
						"description": "enter parent module Id to get submodules and it's permissions",
						"type": "string"
					},
					{
						"name": "moduleName",
						"in": "query",
						"description": "enter module name here",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"cloudwatch rule management"
				],
				"summary": "Company admin can update respective models",
				"description": "* Company admin can update respective models.\n* Admin can update respective models based on permission.\n",
				"operationId": "rmsCatUpdate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateRuleByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "update successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"cloudwatch rule management"
				],
				"summary": "Company admin can add respective models",
				"description": "* Company admin can add respective models.\n* Admin can add respective models based on permission.\n",
				"operationId": "rmsCatAdd",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addRuleByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"cloudwatch rule management"
				],
				"summary": "Company admin can delete respective models",
				"description": "* Company admin can delete respective models.\n* Admin can delete respective models based on permission.\n",
				"operationId": "rmsCatDelete",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteRuleByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"cloudwatch rule management"
				],
				"summary": "Company admin can list respective models",
				"description": "* Company admin can list respective models.\n* Admin can list respective models based on permission.\n",
				"operationId": "rmsCatList",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listModelRuleByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "data available"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/sendMailTemplate": {
			"get": {
				"tags": [
					"candidate accept / reject interview schedule"
				],
				"summary": "Candidate accept / reject interview schedule",
				"description": "* Candidate accept / reject interview schedule\n",
				"operationId": "smtGet",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "mode",
						"in": "query",
						"description": "mode",
						"type": "string",
						"enum": [
							"markConfirmationByApplicant",
							"markConfirmationByInterviewer"
						]
					},
					{
						"name": "application_id",
						"in": "query",
						"description": "enter application id of applicant",
						"type": "string"
					},
					{
						"name": "lifecycle_stage",
						"in": "query",
						"description": "enter stage name here",
						"type": "string"
					},
					{
						"name": "job_id",
						"in": "query",
						"description": "enter job id here",
						"type": "string"
					},
					{
						"name": "applicant_email",
						"in": "query",
						"description": "enter applicant email here",
						"type": "string"
					},
					{
						"name": "interview_confirmed_by_applicant",
						"in": "query",
						"description": "enter if interview confirmed by applicant",
						"type": "boolean"
					},
					{
						"name": "interviewer_email",
						"in": "query",
						"description": "enter interviewer email here",
						"type": "string"
					},
					{
						"name": "interview_confirmed_by_interviewer",
						"in": "query",
						"description": "enter if interview confirmed by interviewer",
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"send emails through rule and manual"
				],
				"summary": "Send emails through trigger.",
				"description": "* Send emails through trigger.\n",
				"operationId": "sendMailTrigger",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/triggerRuleByClw"
						}
					}
				],
				"responses": {
					"200": {
						"description": "update successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"send emails through rule and manual"
				],
				"summary": "Admin can send emails manually",
				"description": "* Admin can send emails manually.\n",
				"operationId": "sendMailManual",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/manualSendEmail"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"send test links and user mark attendance by applicant"
				],
				"summary": "Send test link",
				"description": "* Send test link to applicants.\n* Mark attendance by applicant before test.\n",
				"operationId": "sendTestLink",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/sendTestLink"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				}
			}
		},
		"/applicantLifecycle": {
			"get": {
				"tags": [
					"lifecycle management"
				],
				"summary": "Get and update applicant stage data",
				"description": "* Get count for different requirements\n",
				"operationId": "alGet",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "mode",
						"in": "query",
						"description": "mode",
						"type": "string",
						"enum": [
							"updateApplicantStage",
							"giveMovementData",
							"giveApplicationIds"
						]
					},
					{
						"name": "application_ids",
						"in": "query",
						"description": "enter application ids to update",
						"type": "string"
					},
					{
						"name": "stage_id",
						"in": "query",
						"description": "enter stage id here",
						"type": "number"
					},
					{
						"name": "lifecycle_stage",
						"in": "query",
						"description": "enter stage to be updated here",
						"type": "string"
					},
					{
						"name": "job_id",
						"in": "query",
						"description": "enter job id here",
						"type": "string"
					},
					{
						"name": "lifecycle_id",
						"in": "query",
						"description": "enter lifecycle id here",
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"lifecycle management"
				],
				"summary": "Company admin can update respective models",
				"description": "* Company admin can update respective models.\n* Admin can update respective models based on permission.\n",
				"operationId": "alUpdate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateStageByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "update successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"lifecycle management"
				],
				"summary": "Company admin can add respective models",
				"description": "* Company admin can add respective models.\n* Admin can add respective models based on permission.\n",
				"operationId": "alAdd",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addStageByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"lifecycle management"
				],
				"summary": "Company admin can delete respective models",
				"description": "* Company admin can delete respective models.\n* Admin can delete respective models based on permission.\n",
				"operationId": "alDelete",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteStageByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"lifecycle management"
				],
				"summary": "Company admin can list respective models",
				"description": "* Company admin can list respective models.\n* Admin can list respective models based on permission.\n",
				"operationId": "alList",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listModelStageByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "data available"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/ratingFeedbackInterviewer": {
			"get": {
				"tags": [
					"interviewer and rating/feedback management"
				],
				"summary": "Get applicant data based on avg rating",
				"description": "* Get data for different requirements\n",
				"operationId": "rfiGet",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "mode",
						"in": "query",
						"description": "mode",
						"type": "string",
						"enum": [
							"sortByAvgRating",
							"getApplicationsOnDashboard",
							"fetchListOfUser",
							"getApplicantsAccToInterview",
							"generateSignedUrl"
						]
					},
					{
						"name": "application_ids",
						"in": "query",
						"description": "enter application ids to update",
						"type": "string"
					},
					{
						"name": "stage_id",
						"in": "query",
						"description": "enter stage id here",
						"type": "number"
					},
					{
						"name": "lifecycle_stage",
						"in": "query",
						"description": "enter stage name here",
						"type": "string"
					},
					{
						"name": "job_id",
						"in": "query",
						"description": "enter job id here",
						"type": "string"
					},
					{
						"name": "lifecycle_id",
						"in": "query",
						"description": "enter lifecycle id here",
						"type": "number"
					},
					{
						"name": "sortingOrder",
						"in": "query",
						"description": "select sorting order",
						"type": "string",
						"enum": [
							"DESC",
							"ASC"
						],
						"default": "DESC"
					},
					{
						"name": "company_id",
						"in": "query",
						"description": "enter company id here",
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page here",
						"type": "string"
					},
					{
						"name": "searchValue",
						"in": "query",
						"description": "enter search value here",
						"type": "string"
					},
					{
						"name": "objectKey",
						"in": "query",
						"description": "enter S3 object key here to generate signed url",
						"type": "string"
					},
					{
						"name": "showOnlyAccepted",
						"in": "query",
						"description": "enter filter value to show accepted/rejected schedules by interviewer",
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"interviewer and rating/feedback management"
				],
				"summary": "Company admin can update respective models",
				"description": "* Company admin can update respective models.\n* Admin can update respective models based on permission.\n",
				"operationId": "rfiUpdate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateRFIByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "update successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"interviewer and rating/feedback management"
				],
				"summary": "Company admin can add respective models",
				"description": "* Company admin can add respective models.\n* Admin can add respective models based on permission.\n",
				"operationId": "rfiAdd",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addRFIByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"interviewer and rating/feedback management"
				],
				"summary": "Company admin can delete respective models",
				"description": "* Company admin can delete respective models.\n* Admin can delete respective models based on permission.\n",
				"operationId": "rfiDelete",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteRFIByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"interviewer and rating/feedback management"
				],
				"summary": "Company admin can list respective models",
				"description": "* Company admin can list respective models.\n* Admin can list respective models based on permission.\n",
				"operationId": "rfiList",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listModelRFIByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "data available"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/blogManagement": {
			"get": {
				"tags": [
					"Blogmanagement"
				],
				"summary": "GET details of blogs given by category,sub_category,email,b_title,tags,status_type ",
				"description": "GET details of blogs given by user ",
				"operationId": "getblogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "cat_id",
						"in": "query",
						"description": "enter cat_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "sub_cat_id",
						"in": "query",
						"description": "enter sub_cat_id",
						"required": false,
						"type": "string"
					},
					{
						"name": "b_title",
						"in": "query",
						"description": "enter b_title",
						"required": false,
						"type": "string"
					},
					{
						"name": "tags",
						"in": "query",
						"description": "enter tags",
						"required": false,
						"type": "string"
					},
					{
						"name": "status_type",
						"in": "query",
						"description": "enter status_type",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Blogs Found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"Blogmanagement"
				],
				"summary": "Insert blogs ",
				"description": "insert blogs on the basis of its b_title,b_description,tags,status_type,subcategory in table",
				"operationId": "createblogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InsertBlogs"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Blogs added Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"Blogmanagement"
				],
				"summary": "update blogs ",
				"description": "update blogs  ",
				"operationId": "UpdateBlogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UpdateBlogs"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Blogs Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"Blogmanagement"
				],
				"summary": "delete blogs",
				"description": "delete blogs on the basis of its b_title and b_id",
				"operationId": "DeleteBlogs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DeleteBlogs"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Blogs Deleted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/blogCategory": {
			"get": {
				"tags": [
					"category"
				],
				"summary": "GET categories of blog ",
				"description": "User can see all the categories",
				"operationId": "getcategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Categories found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"category"
				],
				"summary": "Add Categores",
				"description": "Create categories",
				"operationId": "createcategories",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/CreateCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Category added Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"category"
				],
				"summary": "Update Categories ",
				"description": "Update Category",
				"operationId": "updateCategories",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdateCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Category Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"category"
				],
				"summary": "delete Category ",
				"description": "delete category on the basis of its cat_id and cat_name",
				"operationId": "deleteCategories",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeleteCategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Category Deleted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/blogSubcategory": {
			"get": {
				"tags": [
					"subcategory"
				],
				"summary": "GET subcategory of blog ",
				"description": "User can see all the subcategory",
				"operationId": "getsubcategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "cat_id",
						"in": "query",
						"description": "enter cat_id",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "subcategory found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"subcategory"
				],
				"summary": "Add subcategory",
				"description": "Create subcategory",
				"operationId": "createsubcategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/CreateSubcategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "subcategory added Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"subcategory"
				],
				"summary": "Update subcategory ",
				"description": "Update subcategory",
				"operationId": "UpdateSubcategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdateSubcategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Subcategory Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"subcategory"
				],
				"summary": "delete Subcategory ",
				"description": "delete Subcategory on the basis of its sub_cat_id ",
				"operationId": "DeleteSubcategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeleteSubcategory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Subcategory Deleted Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmAppraisal": {
			"get": {
				"tags": [
					"hcmAppraisal"
				],
				"summary": "Find AppraisalDueDate of user ",
				"description": "See AppraisalDueDate users on the basis of emp_email,fullName,cycle,start_date,end_date ",
				"operationId": "getAppraisalDueDate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "emp_email",
						"in": "query",
						"description": "enter emp_email",
						"required": false,
						"type": "string"
					},
					{
						"name": "fullName",
						"in": "query",
						"description": "enter fullName ",
						"required": false,
						"type": "string"
					},
					{
						"name": "cycle",
						"in": "query",
						"description": "enter cycle ",
						"required": false,
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "enter start_date",
						"required": false,
						"type": "string"
					},
					{
						"name": "end_date",
						"in": "query",
						"description": "enter end_date",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "AppraisalDueDate found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"hcmAppraisal"
				],
				"summary": "Update status of AppraisalDueDate",
				"description": "Finance manager can set the appraisal of employee from status Inprogress to Appraised",
				"operationId": "Update status of AppraisalDueDate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AppraisalDueDatestatusUpdate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "AppraisalDueDate  Status updated sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"hcmAppraisal"
				],
				"summary": "Delay AppraisalDueDate",
				"description": "AppraisalDueDate delayed By HR/Admin on the basis of cycle and comments can also be added ,'cycle' contains either 'march' or 'october','year' contains the year of appraisal",
				"operationId": "Delay AppraisalDueDate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AppraisalDueDateDelayed"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User AppraisalDueDate Updated Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/hcmAppraisalLog": {
			"get": {
				"tags": [
					"hcmAppraisalLog"
				],
				"summary": "Find AppraisalDueDate of user ",
				"description": "Admin can see the AppraisalDueDate of user on the basis of employee's email,cycle i.e march or october and gets you the appraisal done,rangeOf contains one of these('appraisaldate','updatedappraisalduedate','createdat') then provide start_date and end_date also if required, Other than this User can also see his past appraisals logs",
				"operationId": "Find AppraisalDueDate of user",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "enter page no.",
						"required": true,
						"type": "string"
					},
					{
						"name": "cycle",
						"in": "query",
						"description": "enter cycle ",
						"required": false,
						"type": "string"
					},
					{
						"name": "emp_email",
						"in": "query",
						"description": "enter email ",
						"required": false,
						"type": "string"
					},
					{
						"name": "rangeOf",
						"in": "query",
						"description": "enter rangeOf",
						"required": false,
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "enter start_date",
						"required": false,
						"type": "string"
					},
					{
						"name": "end_date",
						"in": "query",
						"description": "enter end_date",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "AppraisalDueDate found Sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"hcmAppraisalLog"
				],
				"summary": "Count appraisalDueDate of employee",
				"description": "Count AppraisalDueDate of employee on the basis of start_date and end_date if start_date and end_date is not provided the it will give count of all coming appraisals",
				"operationId": "Count appraisalDueDate of employee",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AppraisalDueDateCount"
						}
					}
				],
				"responses": {
					"200": {
						"description": "CountAppraisalDueDate updated sucessfully"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/sandwichTrigger": {
			"patch": {
				"tags": [
					"sandwichTrigger"
				],
				"summary": "sandwich mark trigger.",
				"description": "sandwich mark trigger.\n",
				"operationId": "markSandwich",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/markSandwich"
						}
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		},
		"/macrosInEmail": {
			"get": {
				"tags": [
					"macro management and detection"
				],
				"summary": "Detect Macros in selected email template",
				"description": "* Get data for different requirements\n",
				"operationId": "mieGet",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "mode",
						"in": "query",
						"description": "mode",
						"type": "string",
						"enum": [
							"detectMacros"
						]
					},
					{
						"name": "emailTemplateId",
						"in": "query",
						"description": "enter email template id to detect macros in it.",
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "enter page here",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "search results matching criteria"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"post": {
				"tags": [
					"macro management and detection"
				],
				"summary": "Company admin can update respective models",
				"description": "* Company admin can update respective models.\n* Admin can update respective models based on permission.\n",
				"operationId": "mieUpdate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/updateMIEByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "update successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"put": {
				"tags": [
					"macro management and detection"
				],
				"summary": "Company admin can add respective models",
				"description": "* Company admin can add respective models.\n* Admin can add respective models based on permission.\n",
				"operationId": "mieAdd",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/addMIEByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"delete": {
				"tags": [
					"macro management and detection"
				],
				"summary": "Company admin can delete respective models",
				"description": "* Company admin can delete respective models.\n* Admin can delete respective models based on permission.\n",
				"operationId": "mieDelete",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/deleteMIEByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "add successful"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			},
			"patch": {
				"tags": [
					"macro management and detection"
				],
				"summary": "Company admin can list respective models",
				"description": "* Company admin can list respective models.\n* Admin can list respective models based on permission.\n",
				"operationId": "mieList",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "pass an optional search string for looking up inventory",
						"required": false,
						"schema": {
							"$ref": "#/definitions/listModelMIEByCAdmin"
						}
					}
				],
				"responses": {
					"200": {
						"description": "data available"
					},
					"400": {
						"description": "what went wrong",
						"schema": {
							"type": "object",
							"properties": {
								"err": {
									"type": "string",
									"example": "some error occured"
								}
							}
						}
					}
				},
				"security": [
					{
						"Authorization": []
					}
				]
			}
		}
	},
	"securityDefinitions": {
		"Authorization": {
			"type": "apiKey",
			"name": "Authorization",
			"in": "header"
		}
	},
	"definitions": {
		"updateadmin": {
			"type": "object",
			"properties": {
				"context": {
					"type": "string"
				},
				"model": {
					"type": "string"
				},
				"value": {
					"$ref": "#/definitions/lockCSVupload_Lock"
				},
				"changes": {
					"type": "object",
					"properties": {}
				}
			}
		},
		"updateadminresult": {
			"type": "string"
		},
		"deleteadmin": {
			"type": "object",
			"properties": {
				"context": {
					"type": "string"
				},
				"model": {
					"type": "string"
				},
				"value": {
					"$ref": "#/definitions/lockCSVupload_Lock"
				}
			}
		},
		"deleteadminresult": {
			"type": "string"
		},
		"addadmin": {
			"type": "object",
			"properties": {
				"context": {
					"type": "string"
				},
				"insertRelated": {
					"type": "boolean"
				},
				"model": {
					"type": "string"
				},
				"value": {
					"$ref": "#/definitions/addadmin_value"
				},
				"related": {
					"$ref": "#/definitions/addadmin_related"
				}
			}
		},
		"addadminresult": {
			"type": "string"
		},
		"listadmin": {
			"type": "object",
			"properties": {
				"context": {
					"type": "string"
				},
				"list": {
					"type": "string"
				},
				"connected": {
					"type": "string"
				},
				"LastEvaluatedKey": {
					"$ref": "#/definitions/listadmin_LastEvaluatedKey"
				}
			}
		},
		"listadminresult": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/lockCSVupload_Lock"
			}
		},
		"lockCSVupload_Lock": {
			"properties": {
				"name": {
					"type": "string"
				}
			}
		},
		"addadmin_value": {
			"properties": {
				"Usertype": {
					"type": "string",
					"enum": [
						"app",
						"admin",
						"both"
					]
				}
			}
		},
		"addadmin_related": {
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"$ref": "#/definitions/addadmin_related_value"
				}
			}
		},
		"addadmin_related_value": {
			"properties": {
				"name": {
					"type": "string"
				},
				"role": {
					"type": "string",
					"example": "admin"
				}
			}
		},
		"listadmin_LastEvaluatedKey": {
			"properties": {
				"page": {
					"type": "number"
				}
			}
		},
		"loginresult": {
			"type": "object",
			"properties": {
				"AuthenticationResult": {
					"$ref": "#/definitions/loginresult_AuthenticationResult"
				},
				"ChallengeParameters": {
					"type": "object",
					"properties": {}
				}
			}
		},
		"login": {
			"type": "object",
			"properties": {
				"clientId": {
					"type": "string",
					"example": "2s3bgbni02scj5rfk8hgg7s62k"
				},
				"userpool": {
					"type": "string",
					"example": "eu-central-1_qT5D7sLJo"
				},
				"username": {
					"type": "string",
					"example": "louis.litt@jf-projects.com"
				},
				"password": {
					"type": "string",
					"example": "Sr8AF7M8NHO1hEv3WGi/BQ=="
				}
			}
		},
		"changepassword": {
			"type": "object",
			"required": [
				"accesstoken",
				"oldPassword",
				"newpassword"
			],
			"properties": {
				"accesstoken": {
					"type": "string",
					"example": "token"
				},
				"oldPassword": {
					"type": "string",
					"example": "Sr8AF7M8NHO1hEv3WGi/BQ=="
				},
				"newpassword": {
					"type": "string",
					"example": "Sr8AF7M8NHO2dRv3WGi/BQ=="
				}
			}
		},
		"forgotconfirm": {
			"type": "object",
			"required": [
				"mode",
				"clientId",
				"username",
				"userpool"
			],
			"properties": {
				"mode": {
					"type": "string",
					"enum": [
						"forgot",
						"confirm",
						"resend"
					]
				},
				"clientId": {
					"type": "string",
					"example": "2s3bgbni02scj5rfk8hgg7s62k"
				},
				"username": {
					"type": "string",
					"example": "louis.litt@jf-projects.com"
				},
				"confirmationCode": {
					"type": "string",
					"example": 123456
				},
				"password": {
					"type": "string",
					"example": "Sr8AF7M8NHO1hEv3WGi/BQ=="
				},
				"UserContextData": {
					"type": "object",
					"properties": {}
				},
				"userpool": {
					"type": "string",
					"example": "eu-central-1_qT5D7sLJo"
				}
			}
		},
		"signup": {
			"type": "object",
			"required": [
				"clientId",
				"username",
				"password",
				"userattributes"
			],
			"properties": {
				"clientId": {
					"type": "string",
					"example": "2s3bgbni02scj5rfk8hgg7s62k"
				},
				"username": {
					"type": "string",
					"example": "louis.litt@jf-projects.com"
				},
				"password": {
					"type": "string",
					"example": "Sr8AF7M8NHO1hEv3WGi/BQ=="
				},
				"userattributes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/signup_userattributes"
					}
				}
			}
		},
		"signupresult": {
			"type": "object",
			"properties": {
				"UserConfirmed": {
					"type": "boolean"
				},
				"CodeDeliveryDetails": {
					"$ref": "#/definitions/signupresult_CodeDeliveryDetails"
				}
			}
		},
		"loginresult_AuthenticationResult": {
			"properties": {
				"AccessToken": {
					"type": "string"
				},
				"ExpiresIn": {
					"type": "number"
				},
				"IdToken": {
					"type": "string"
				},
				"RefreshToken": {
					"type": "string"
				},
				"TokenType": {
					"type": "string"
				}
			}
		},
		"signup_userattributes": {
			"properties": {
				"attributeName": {
					"type": "string",
					"example": "email"
				},
				"attributeValue": {
					"type": "string",
					"example": "louis.litt@jf-projects.com"
				}
			}
		},
		"signupresult_CodeDeliveryDetails": {
			"properties": {
				"Destination": {
					"type": "string"
				},
				"DeliveryMedium": {
					"type": "string"
				},
				"AttributeName": {
					"type": "string"
				},
				"UserSub": {
					"type": "string"
				}
			}
		},
		"viewEmployee": {
			"properties": {
				"username": {
					"type": "string",
					"example": "louis.litt@jf-projects.com"
				},
				"firstName": {
					"type": "string",
					"example": "Louis"
				},
				"lastName": {
					"type": "string",
					"example": "litt"
				},
				"gender": {
					"type": "string",
					"enum": [
						"male",
						"female"
					],
					"example": "male"
				},
				"dateOfBirth": {
					"type": "string",
					"example": "1576744435105"
				},
				"dateOfJoining": {
					"type": "string",
					"example": "1576744438976"
				},
				"email": {
					"type": "string",
					"example": "louis.litt@jf-projects.com"
				},
				"telephone": {
					"type": "number",
					"example": 123737216587
				},
				"employmentStatus": {
					"type": "string",
					"enum": [
						"full",
						"part",
						"temporary"
					],
					"example": "full"
				},
				"fatherName": {
					"type": "string",
					"example": ""
				},
				"motherName": {
					"type": "string",
					"example": ""
				},
				"profilePicUrl": {
					"type": "string",
					"example": "5force-development/code5portal/userpics/public/Employee/1576652065743.png"
				}
			}
		},
		"updateEmployee": {
			"properties": {
				"profilePicUrl": {
					"type": "string"
				},
				"mode": {
					"type": "string",
					"enum": [
						"profile",
						"address",
						"emergencyContact",
						"personalInfo",
						"bankInfo",
						"familyInfo",
						"educationInfo",
						"experience"
					]
				},
				"profile": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"phone": {
							"type": "string"
						},
						"email": {
							"type": "string"
						},
						"gender": {
							"type": "string",
							"enum": [
								"male",
								"female"
							]
						},
						"dateOfBirth": {
							"type": "string"
						},
						"reportsto": {
							"type": "string"
						},
						"roasterDays": {
							"type": "array",
							"items": {
								"type": "string",
								"enum": [
									"Sunday",
									"Monday",
									"Tuesday",
									"Wednesday",
									"Thursday",
									"Friday",
									"Saturday"
								]
							}
						}
					}
				},
				"address": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"street": {
							"type": "string"
						},
						"village": {
							"type": "string"
						},
						"post": {
							"type": "string"
						},
						"district": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"country": {
							"type": "string"
						},
						"Pin": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"emergencyContact": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"name": {
							"type": "string"
						},
						"relationship": {
							"type": "string"
						},
						"phone": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"personalInfo": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"passportNo": {
							"type": "string"
						},
						"passportExpiry": {
							"type": "string"
						},
						"aadharNumber": {
							"type": "string"
						},
						"telephone": {
							"type": "string"
						},
						"nationality": {
							"type": "string"
						},
						"relegion": {
							"type": "string",
							"enum": [
								"Hindu",
								"Muslim",
								"Sikh",
								"Christian"
							]
						},
						"Marital_status": {
							"type": "boolean"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"bankInfo": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"bankName": {
							"type": "string"
						},
						"bankAccountNo": {
							"type": "string"
						},
						"bankBranchName": {
							"type": "string"
						},
						"IFSC": {
							"type": "string"
						},
						"PAN_No": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"familyInfo": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"name": {
							"type": "string"
						},
						"relationship": {
							"type": "string"
						},
						"dateOfBirth": {
							"type": "string"
						},
						"phone": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"educationInfo": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"college": {
							"type": "string"
						},
						"course": {
							"type": "string"
						},
						"from": {
							"type": "string"
						},
						"to": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				},
				"experience": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"company": {
							"type": "string"
						},
						"designation": {
							"type": "string"
						},
						"from": {
							"type": "string"
						},
						"to": {
							"type": "string"
						},
						"id": {
							"type": "string"
						}
					}
				}
			}
		},
		"attendancecheck": {
			"type": "object",
			"required": [
				"checkIn",
				"checkOut"
			],
			"properties": {
				"empId": {
					"type": "string",
					"example": "E1"
				},
				"checkIn": {
					"type": "string",
					"example": "1579246017748"
				},
				"checkOut": {
					"type": "string",
					"example": "1579266166430"
				},
				"mapId": {
					"type": "string",
					"example": "M1"
				}
			}
		},
		"attendancemark": {
			"type": "object",
			"required": [
				"date"
			],
			"properties": {
				"empId": {
					"type": "string",
					"example": "E1"
				},
				"date": {
					"type": "string",
					"example": "1579246017748"
				},
				"mapId": {
					"type": "string",
					"example": "M1"
				}
			}
		},
		"applyLeave": {
			"type": "object",
			"required": [
				"leaveType",
				"reason",
				"fromDate"
			],
			"properties": {
				"leaveType": {
					"type": "string",
					"enum": [
						"ShortLeave",
						"FullTime",
						"HalfDay"
					]
				},
				"reason": {
					"type": "string",
					"example": "going to my home town."
				},
				"fromDate": {
					"type": "string",
					"example": "2020-01-05"
				},
				"toDate": {
					"type": "string",
					"example": "2020-01-07"
				},
				"availabilty": {
					"type": "boolean",
					"example": true
				},
				"dayCount": {
					"type": "number",
					"example": 1
				}
			}
		},
		"listLeaveAdmin": {
			"type": "object",
			"required": [
				"context"
			],
			"properties": {
				"context": {
					"type": "string",
					"example": "admin"
				},
				"filter": {
					"type": "object",
					"properties": {
						"status": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"leaveType": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"fromDate": {
							"type": "string",
							"example": "2020-01-05"
						},
						"toDate": {
							"type": "string",
							"example": "2020-01-09"
						},
						"department": {
							"type": "string",
							"example": "backend"
						},
						"userId": {
							"type": "string",
							"example": "suchit@code5.org"
						}
					}
				},
				"page": {
					"type": "string",
					"example": "1"
				}
			}
		},
		"updateStatus": {
			"type": "object",
			"required": [
				"context",
				"id",
				"status"
			],
			"properties": {
				"context": {
					"type": "string",
					"example": "admin"
				},
				"id": {
					"type": "number",
					"example": "11"
				},
				"status": {
					"type": "string",
					"enum": [
						"Approved",
						"Reject"
					]
				},
				"commentInApproval": {
					"type": "string",
					"example": "your leave has been approved."
				},
				"reasonForRejection": {
					"type": "string",
					"example": "sorry! you have taken your leave."
				}
			}
		},
		"cancelRequest": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number",
					"example": 1
				}
			}
		},
		"inviteUser": {
			"required": [
				"userpool",
				"name",
				"email",
				"Company",
				"EmployeeId",
				"companyName",
				"Department",
				"DesignationId",
				"DesignationName",
				"shiftTime",
				"DOJ",
				"Role",
				"RoleId",
				"DOB",
				"reportsTo"
			],
			"properties": {
				"EmployeeId": {
					"type": "string",
					"example": "E01"
				},
				"userpool": {
					"type": "string",
					"example": "xyz"
				},
				"name": {
					"type": "string",
					"example": "Pushpendra Singh"
				},
				"email": {
					"type": "string",
					"example": "pushpendra@code5.org"
				},
				"Company": {
					"type": "string",
					"example": "1844662c-fd0a-4cb6-b24d-f69b125856b5"
				},
				"companyName": {
					"type": "string",
					"example": "xyz"
				},
				"Department": {
					"type": "string",
					"example": "1844662c-fd0a-4cb6-b24d-f69b125856b5"
				},
				"DesignationName": {
					"type": "string",
					"example": "xyz"
				},
				"DesignationId": {
					"type": "string",
					"example": "1844662c-fd0a-4cb6-b24d-f69b125856b5"
				},
				"shiftTime": {
					"type": "string",
					"example": "pqr"
				},
				"DOJ": {
					"type": "string",
					"example": "2019-03-04T00:00:00.000Z"
				},
				"Role": {
					"type": "string",
					"example": "pqr"
				},
				"RoleId": {
					"type": "string",
					"example": "pqr"
				},
				"DOB": {
					"type": "string",
					"example": "1995-04-05T00:00:00.000Z"
				},
				"reportsTo": {
					"type": "string",
					"example": "1995-04-05T00:00:00.000Z"
				}
			}
		},
		"addCompany": {
			"required": [
				"companyName",
				"description",
				"costCenter"
			],
			"properties": {
				"companyName": {
					"type": "string",
					"example": "abc"
				},
				"description": {
					"type": "string",
					"example": "xyz"
				},
				"costCenter": {
					"type": "string",
					"example": "pqr"
				}
			}
		},
		"deleteCompany": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "string"
				}
			}
		},
		"UserFilter": {
			"type": "object",
			"required": [
				"designation",
				"page"
			],
			"properties": {
				"designation": {
					"type": "string",
					"example": "designation_name"
				},
				"page": {
					"type": "string",
					"example": "1"
				}
			}
		},
		"deleteEmployee": {
			"type": "object",
			"required": [
				"context",
				"model",
				"value"
			],
			"properties": {
				"context": {
					"type": "string",
					"example": ""
				},
				"model": {
					"type": "string",
					"example": "User"
				},
				"value": {
					"type": "object",
					"required": [
						"id",
						"userpool"
					],
					"properties": {
						"id": {
							"type": "string",
							"example": "kunal@code5.org"
						},
						"userpool": {
							"type": "string",
							"example": "ap-south-1_bUo9shNIF"
						}
					}
				}
			}
		},
		"updateCompany": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "string",
					"example": "xyz"
				},
				"companyName": {
					"type": "string",
					"example": "abc"
				},
				"description": {
					"type": "string",
					"example": "xyz"
				},
				"costCenter": {
					"type": "string",
					"example": "pqr"
				}
			}
		},
		"createModule": {
			"type": "object",
			"required": [
				"ModuleName",
				"description"
			],
			"properties": {
				"ModuleName": {
					"type": "string",
					"example": "xyz"
				},
				"description": {
					"type": "string",
					"example": "xyz"
				}
			}
		},
		"addModule": {
			"type": "object",
			"required": [
				"ModuleName",
				"description"
			],
			"properties": {
				"ModuleName": {
					"type": "string",
					"example": "xyz",
					"minLength": 1
				},
				"description": {
					"type": "string",
					"example": "xyz",
					"minLength": 1
				},
				"parentModuleId": {
					"type": "string"
				},
				"connectRelated": {
					"type": "boolean"
				},
				"permission": {
					"type": "string"
				}
			}
		},
		"updateDeleteModule": {
			"type": "object",
			"required": [
				"companyId",
				"moduleId"
			],
			"properties": {
				"companyId": {
					"type": "string",
					"example": "xyz"
				},
				"moduleId": {
					"type": "string",
					"example": "xyz"
				}
			}
		},
		"addHoliday": {
			"type": "object",
			"required": [
				"holidayName",
				"holidayDate",
				"holidayDay"
			],
			"properties": {
				"holidayName": {
					"type": "string",
					"example": "Republic Day"
				},
				"holidayDate": {
					"type": "string",
					"example": "2020-01-26"
				},
				"holidayDay": {
					"type": "string",
					"example": "Sunday"
				}
			}
		},
		"updateHoliday": {
			"type": "object",
			"properties": {
				"holidayName": {
					"type": "string",
					"example": "Republic Day"
				},
				"holidayDate": {
					"type": "string",
					"example": "2020-01-26"
				},
				"holidayDay": {
					"type": "string",
					"example": "Sunday"
				},
				"id": {
					"type": "number",
					"example": 2
				}
			}
		},
		"deleteHoliday": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number",
					"example": 1
				}
			}
		},
		"listLeave": {
			"type": "object",
			"properties": {
				"userId": {
					"type": "string",
					"example": "suchit@code5.org"
				}
			}
		},
		"updateLeave": {
			"type": "object",
			"required": [
				"userId",
				"leaveId",
				"changeleave"
			],
			"properties": {
				"userId": {
					"type": "string",
					"example": "suchit@code5.org"
				},
				"leaveId": {
					"type": "string",
					"example": "7e328434-c91a-41c8-afce-322afd511302"
				},
				"changeleave": {
					"type": "object",
					"properties": {
						"CasualLeave": {
							"type": "number",
							"example": 10
						},
						"SickLeave": {
							"type": "number",
							"example": 5
						}
					}
				}
			}
		},
		"updateshift": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number",
					"example": 1
				},
				"startAt": {
					"type": "string",
					"example": "10:00:00"
				},
				"endAt": {
					"type": "string",
					"example": "19:00:00"
				},
				"shiftName": {
					"type": "string",
					"example": "morning"
				}
			}
		},
		"addshift": {
			"type": "object",
			"required": [
				"companyId"
			],
			"properties": {
				"companyId": {
					"type": "string",
					"example": "code5"
				},
				"shiftName": {
					"type": "string",
					"example": "morning"
				},
				"startAt": {
					"type": "string",
					"example": "10:00:00"
				},
				"endAt": {
					"type": "string",
					"example": "19:00:00"
				},
				"mode": {
					"type": "string",
					"enum": [
						"roaster"
					]
				},
				"roasterName": {
					"type": "string"
				},
				"days": {
					"type": "array",
					"items": {
						"type": "string",
						"enum": [
							"Monday",
							"Tuesday",
							"Wednesday",
							"Thursday",
							"Friday",
							"Saturday",
							"Sunday"
						]
					}
				}
			}
		},
		"deleteshift": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number",
					"example": 10
				},
				"mode": {
					"type": "string",
					"enum": [
						"roaster"
					]
				}
			}
		},
		"addProfile": {
			"type": "object",
			"required": [
				"userId",
				"profilePicUrl"
			],
			"properties": {
				"userId": {
					"type": "string"
				},
				"profilePicUrl": {
					"type": "string"
				}
			}
		},
		"deleteLeave": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number",
					"example": 10
				}
			}
		},
		"getBirthday": {
			"type": "object"
		},
		"updateWorkLog": {
			"type": "object",
			"required": [
				"id",
				"type",
				"projectName",
				"username",
				"update_by_user_id"
			],
			"properties": {
				"id": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"update_by_user_id": {
					"type": "string"
				}
			}
		},
		"deleteAnnouncement": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number",
					"example": 10
				}
			}
		},
		"addAnnouncement": {
			"type": "object",
			"required": [
				"title",
				"type",
				"summary",
				"fromDate",
				"toDate"
			],
			"properties": {
				"title": {
					"type": "string",
					"example": "RegardingLeave"
				},
				"type": {
					"type": "string",
					"example": "holiday"
				},
				"fromDate": {
					"type": "string",
					"example": "2020-02-05"
				},
				"toDate": {
					"type": "string",
					"example": "2020-02-07"
				},
				"summary": {
					"type": "string",
					"example": "office will close from this to that."
				}
			}
		},
		"updateAnnouncement": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number",
					"example": 2
				},
				"title": {
					"type": "string",
					"example": "RegardingLeave"
				},
				"type": {
					"type": "string",
					"example": "holiday"
				},
				"fromDate": {
					"type": "string",
					"example": "2020-02-05"
				},
				"toDate": {
					"type": "string",
					"example": "2020-02-07"
				},
				"summary": {
					"type": "string",
					"example": "office will close from this to that."
				}
			}
		},
		"addcomp": {
			"type": "object",
			"required": [
				"date"
			],
			"properties": {
				"date": {
					"type": "string",
					"example": "2020-02-03"
				}
			}
		},
		"updatecomp": {
			"type": "object",
			"required": [
				"id",
				"status",
				"reason"
			],
			"properties": {
				"id": {
					"type": "number",
					"example": 36
				},
				"status": {
					"type": "string",
					"enum": [
						"Approved",
						"Reject"
					]
				},
				"reason": {
					"type": "string"
				}
			}
		},
		"deletecomp": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"date": {
					"type": "number",
					"example": 2
				}
			}
		},
		"applicableLeave": {
			"type": "object",
			"required": [
				"leaveName"
			],
			"properties": {
				"leaveName": {
					"type": "string",
					"example": "Casualleave"
				}
			}
		},
		"desableLeave": {
			"type": "object",
			"required": [
				"leaveId"
			],
			"properties": {
				"leaveId": {
					"type": "string"
				}
			}
		},
		"exportAttendance": {
			"type": "object",
			"properties": {
				"startTime": {
					"type": "string"
				},
				"endTime": {
					"type": "string"
				},
				"download": {
					"type": "string",
					"example": true
				},
				"page": {
					"type": "number"
				}
			}
		},
		"get": {
			"type": "object",
			"properties": {
				"date": {
					"type": "string"
				}
			}
		},
		"eventTrigger": {
			"type": "object",
			"required": [
				"eventName",
				"Hour",
				"Minutes",
				"payload",
				"mode"
			],
			"properties": {
				"mode": {
					"type": "string",
					"enum": [
						"attendanceTrigger",
						"leaveCreditTrigger",
						"sandwichTrigger"
					]
				},
				"eventName": {
					"type": "string"
				},
				"Hour": {
					"type": "string"
				},
				"Minutes": {
					"type": "string"
				},
				"payload": {
					"type": "object"
				}
			}
		},
		"adminUpdate": {
			"type": "object",
			"properties": {
				"userId": {
					"type": "string"
				},
				"mode": {
					"type": "string",
					"enum": [
						"yearlyLeave",
						"applicableLeave"
					]
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"count": {
					"type": "number"
				}
			}
		},
		"updateDesignation": {
			"type": "object",
			"required": [
				"userId",
				"designationId",
				"role",
				"roleId"
			],
			"properties": {
				"userId": {
					"type": "string"
				},
				"designationId": {
					"type": "string"
				},
				"role": {
					"type": "string"
				},
				"roleId": {
					"type": "string"
				}
			}
		},
		"getAdmin": {
			"type": "object",
			"required": [
				"userId",
				"mode"
			],
			"properties": {
				"userId": {
					"type": "string"
				},
				"mode": {
					"type": "string",
					"enum": [
						"yearlyLeave",
						"applicableLeave"
					]
				}
			}
		},
		"addAssets": {
			"type": "object",
			"properties": {
				"companyId": {
					"type": "string"
				},
				"category": {
					"type": "string",
					"enum": [
						"Hardware",
						"Software"
					]
				},
				"assetName": {
					"type": "string"
				},
				"document": {
					"type": "boolean"
				},
				"extension": {
					"type": "string"
				},
				"unique_code": {
					"type": "string"
				},
				"warantyStartFrom": {
					"type": "string"
				},
				"warantyEndFrom": {
					"type": "string"
				},
				"configuration": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"manufacturer": {
					"type": "string"
				},
				"inWaranty": {
					"type": "boolean"
				}
			}
		},
		"updateAssets": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number"
				},
				"assetName": {
					"type": "string"
				},
				"document": {
					"type": "boolean"
				},
				"extension": {
					"type": "string"
				},
				"unique_code": {
					"type": "string"
				},
				"warantyStartFrom": {
					"type": "string"
				},
				"warantyEndFrom": {
					"type": "string"
				},
				"configuration": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"manufacturer": {
					"type": "string"
				},
				"inWaranty": {
					"type": "boolean"
				}
			}
		},
		"deleteAssets": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number"
				}
			}
		},
		"infoAssets": {
			"type": "object",
			"required": [
				"assetId"
			],
			"properties": {
				"assetId": {
					"type": "number"
				}
			}
		},
		"listRequest": {
			"type": "object",
			"required": [
				"mode",
				"subMode"
			],
			"properties": {
				"page": {
					"type": "string"
				},
				"fromDate": {
					"type": "string"
				},
				"toDate": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"mode": {
					"type": "string",
					"enum": [
						"compoff",
						"missAttendance"
					]
				},
				"subMode": {
					"type": "string",
					"enum": [
						"List",
						"count"
					]
				}
			}
		},
		"assignAssets": {
			"type": "object",
			"required": [
				"assetId",
				"companyId",
				"assetUniqueCode",
				"empEmail",
				"empId",
				"empName",
				"fromDate"
			],
			"properties": {
				"companyId": {
					"type": "string"
				},
				"assetId": {
					"type": "string"
				},
				"assetUniqueCode": {
					"type": "string"
				},
				"empEmail": {
					"type": "string"
				},
				"empId": {
					"type": "string"
				},
				"empName": {
					"type": "string"
				},
				"fromDate": {
					"type": "string"
				}
			}
		},
		"updateAssignAssets": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"active": {
					"type": "string"
				},
				"fromDate": {
					"type": "string"
				},
				"id": {
					"type": "number"
				}
			}
		},
		"unassignAsset": {
			"type": "object",
			"required": [
				"id",
				"empEmail",
				"assetUniqueCode"
			],
			"properties": {
				"assetUniqueCode": {
					"type": "string"
				},
				"mode": {
					"type": "string",
					"enum": [
						"temporary",
						"permanent"
					]
				},
				"empEmail": {
					"type": "string"
				}
			}
		},
		"assetAssignInfo": {
			"type": "object",
			"required": [
				"uniqueId"
			],
			"properties": {
				"uniqueId": {
					"type": "string"
				}
			}
		},
		"assetTicketAdd": {
			"type": "object",
			"required": [
				"companyId",
				"issue",
				"assetUniqueCode"
			],
			"properties": {
				"companyId": {
					"type": "string"
				},
				"assetUniqueCode": {
					"type": "string"
				},
				"issue": {
					"type": "string"
				}
			}
		},
		"updateTicket": {
			"type": "object",
			"required": [
				"status",
				"id"
			],
			"properties": {
				"status": {
					"type": "string"
				},
				"id": {
					"type": "number"
				}
			}
		},
		"deleteTickets": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number"
				}
			}
		},
		"emoloyeeTickets": {
			"type": "object",
			"required": [
				"page"
			],
			"properties": {
				"page": {
					"type": "string"
				}
			}
		},
		"assetMain": {
			"type": "object",
			"required": [
				"companyId",
				"assetId",
				"assetUniqueCode",
				"improvements"
			],
			"properties": {
				"companyId": {
					"type": "string"
				},
				"assetId": {
					"type": "number"
				},
				"document": {
					"type": "boolean"
				},
				"extension": {
					"type": "string"
				},
				"assetUniqueCode": {
					"type": "string"
				},
				"improvements": {
					"type": "number"
				}
			}
		},
		"updateMain": {
			"type": "object",
			"required": [
				"id",
				"improvements"
			],
			"properties": {
				"id": {
					"type": "number"
				},
				"improvements": {
					"type": "string"
				},
				"document": {
					"type": "boolean"
				},
				"extension": {
					"type": "string"
				}
			}
		},
		"deleteMain": {
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number"
				}
			}
		},
		"missCheckInApply": {
			"type": "object",
			"required": [
				"date",
				"timeOfcheckout",
				"timeofcheckin",
				"reason"
			],
			"properties": {
				"id": {
					"type": "number"
				},
				"timeOfcheckout": {
					"type": "string"
				},
				"timeofcheckin": {
					"type": "string"
				},
				"reason": {
					"type": "string"
				}
			}
		},
		"updateCheckin": {
			"type": "object",
			"required": [
				"id",
				"status",
				"reason"
			],
			"properties": {
				"id": {
					"type": "number"
				},
				"status": {
					"type": "string",
					"enum": [
						"Approved",
						"Rejected"
					]
				},
				"reason": {
					"type": "string"
				}
			}
		},
		"deleteRequest": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number"
				}
			}
		},
		"markStatus": {
			"type": "object",
			"required": [
				"date"
			],
			"properties": {
				"companyName": {
					"type": "string"
				},
				"date": {
					"type": "string"
				}
			}
		},
		"reportingUsers": {
			"type": "object"
		},
		"switchDept": {
			"type": "object",
			"required": [
				"userId",
				"departmemtId",
				"designationId",
				"roleId"
			],
			"properties": {
				"userId": {
					"type": "string"
				},
				"departmemtId": {
					"type": "string"
				},
				"designationId": {
					"type": "string"
				},
				"roleId": {
					"type": "string"
				}
			}
		},
		"countDes": {
			"type": "object",
			"required": [
				"DepartmentId"
			],
			"properties": {
				"DepartmentId": {
					"type": "string"
				}
			}
		},
		"deleteInfo": {
			"type": "object",
			"required": [
				"id",
				"mode"
			],
			"properties": {
				"id": {
					"type": "string"
				},
				"mode": {
					"type": "string",
					"enum": [
						"FamilyInfo",
						"EducationInfo",
						"Experience"
					]
				}
			}
		},
		"addDoc": {
			"type": "object",
			"required": [
				"docName",
				"extension",
				"userId"
			],
			"properties": {
				"docName": {
					"type": "string"
				},
				"extension": {
					"type": "string"
				},
				"userId": {
					"type": "string"
				}
			}
		},
		"deleteDoc": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "number"
				}
			}
		},
		"getDoc": {
			"type": "object",
			"required": [
				"userId"
			],
			"properties": {
				"userId": {
					"type": "string"
				}
			}
		},
		"updateProjDetail": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"task_id": {
					"type": "string"
				},
				"task_title": {
					"type": "string"
				},
				"task_desciption": {
					"type": "string"
				},
				"new_project_name": {
					"type": "string"
				},
				"priority": {
					"type": "string"
				},
				"update": {
					"type": "string"
				},
				"update_by_user_id": {
					"type": "string"
				},
				"project_status": {
					"type": "string"
				},
				"teamMember": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"projectLeader": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"file_upload": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"file_name": {
								"type": "string"
							},
							"file_ext": {
								"type": "string"
							}
						}
					}
				},
				"username": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"postCreateProject": {
			"type": "object",
			"properties": {
				"new_project_create": {
					"type": "object",
					"properties": {
						"new_project_name": {
							"type": "string"
						},
						"priority": {
							"type": "string"
						},
						"projectLeader": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"teamMember": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"username": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"project_status": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"created_by_id": {
							"type": "string"
						},
						"end_date": {
							"type": "string"
						},
						"start_date": {
							"type": "string"
						},
						"file_upload": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"file_name": {
										"type": "string"
									},
									"file_ext": {
										"type": "string"
									}
								},
								"required": [
									"file_name",
									"file_ext"
								]
							}
						}
					}
				},
				"new_task_create": {
					"type": "object",
					"properties": {
						"task_desciption": {
							"type": "string"
						},
						"project_id": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"created_by_id": {
							"type": "string"
						},
						"task_title": {
							"type": "string"
						},
						"task_type": {
							"type": "string"
						}
					},
					"required": [
						"task_desciption",
						"project_id",
						"username",
						"type",
						"projectName",
						"created_by_id",
						"task_title"
					]
				},
				"create_task_link": {
					"type": "object",
					"properties": {
						"proj_task_id": {
							"type": "string"
						},
						"proj_sub_task_link_id": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"username": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"create_by_user_id": {
							"type": "string"
						}
					},
					"required": [
						"proj_task_id",
						"type",
						"projectName",
						"proj_sub_task_link_id",
						"create_by_user_id",
						"username"
					]
				}
			}
		},
		"postCreateEMS": {
			"type": "object",
			"properties": {
				"new_smtp_setting": {
					"type": "object",
					"properties": {
						"create_by_user_id": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"user_pass": {
							"type": "string"
						},
						"host": {
							"type": "string"
						},
						"email_user_name": {
							"type": "string"
						},
						"port_no": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"username": {
							"type": "string"
						}
					},
					"required": [
						"projectName",
						"type",
						"port_no",
						"user_pass",
						"host",
						"email_user_name",
						"create_by_user_id",
						"username"
					]
				},
				"create_category": {
					"type": "object",
					"properties": {
						"create_by_user_id": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"user_authorise": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"description": {
							"type": "string"
						},
						"category_name": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"add_fields": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"macro_field_name": {
										"type": "string"
									}
								}
							}
						}
					},
					"required": [
						"projectName",
						"type",
						"user_authorise",
						"username",
						"description",
						"category_name",
						"create_by_user_id",
						"add_fields"
					]
				},
				"create_template": {
					"type": "object",
					"properties": {
						"create_by_user_id": {
							"type": "string"
						},
						"projectName": {
							"type": "string"
						},
						"template_subject": {
							"type": "string"
						},
						"template_content": {
							"type": "string"
						},
						"template_attachment_flag": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"template_attachment_data": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"file_name": {
										"type": "string"
									},
									"file_url": {
										"type": "string"
									}
								}
							}
						}
					},
					"required": [
						"projectName",
						"type",
						"username",
						"template_subject",
						"template_content",
						"create_by_user_id",
						"template_attachment_flag"
					]
				},
				"initiate_mail": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"user_email": {
							"type": "string"
						}
					},
					"required": [
						"id",
						"username",
						"user_email"
					]
				}
			}
		},
		"deleteEMSDetail": {
			"type": "object",
			"properties": {
				"smtp_id": {
					"type": "string"
				},
				"cat_id": {
					"type": "string"
				},
				"mac_id": {
					"type": "string"
				},
				"temp_id": {
					"type": "string"
				},
				"page": {
					"type": "string"
				},
				"username": {
					"type": "string"
				}
			},
			"required": [
				"page",
				"username"
			]
		},
		"updateEMSDetail": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"update_by_user_id": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"cat_id": {
					"type": "string"
				},
				"temp_id": {
					"type": "string"
				}
			},
			"required": [
				"type",
				"username",
				"projectName",
				"update_by_user_id"
			]
		},
		"deleteProjectTaskDetail": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"username": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"projectName",
				"type",
				"username"
			]
		},
		"assignNewProjectTaskToUser": {
			"type": "object",
			"properties": {
				"assign_to_user_id": {
					"type": "string"
				},
				"assign_by_user_id": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"created_by_id": {
					"type": "string"
				},
				"proj_task_id": {
					"type": "string"
				},
				"task_duration": {
					"type": "number"
				}
			},
			"required": [
				"assign_to_user_id",
				"assign_by_user_id",
				"username",
				"type",
				"projectName",
				"created_by_id",
				"proj_task_id",
				"task_duration"
			]
		},
		"updateTask": {
			"type": "object",
			"properties": {
				"assign_to_user_id": {
					"type": "string"
				},
				"assign_by_user_id": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"created_by_id": {
					"type": "string"
				},
				"proj_task_id": {
					"type": "string"
				},
				"task_duration": {
					"type": "string"
				},
				"proj_assign_task_detail_id": {
					"type": "string"
				}
			},
			"required": [
				"username",
				"type",
				"projectName",
				"proj_task_id",
				"proj_assign_task_detail_id"
			]
		},
		"deleteAssignTaskDetail": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"username": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"projectName",
				"type",
				"username"
			]
		},
		"addNewCommentForTask": {
			"type": "object",
			"properties": {
				"comment_by_user_id": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"proj_task_id": {
					"type": "string"
				},
				"task_comment": {
					"type": "string"
				},
				"file_upload": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"filename": {
								"type": "string"
							},
							"file_ext": {
								"type": "string"
							}
						},
						"required": [
							"filename",
							"file_ext"
						]
					}
				}
			},
			"required": [
				"comment_by_user_id",
				"username",
				"type",
				"projectName",
				"proj_task_id",
				"task_duration",
				"task_comment"
			]
		},
		"addNewUserWorkLog": {
			"type": "object",
			"properties": {
				"proj_assign_task_detail_id": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"task_comment": {
					"type": "string"
				},
				"create_by_user_id": {
					"type": "string"
				},
				"spend_time_on_task": {
					"type": "string"
				}
			},
			"required": [
				"proj_assign_task_detail_id",
				"username",
				"type",
				"projectName",
				"create_by_user_id",
				"task_comment",
				"spend_time_on_task"
			]
		},
		"addTaskType": {
			"type": "object",
			"properties": {
				"comment_by_user_id": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"task_type": {
					"type": "string"
				}
			},
			"required": [
				"create_by_user_id",
				"username",
				"type",
				"projectName",
				"task_type"
			]
		},
		"deleteTaskType": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"username": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"projectName",
				"type",
				"username"
			]
		},
		"deleteProjectDetail": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"task_id": {
					"type": "string"
				},
				"link_task_id": {
					"type": "string"
				}
			},
			"required": [
				"projectName",
				"type",
				"username"
			]
		},
		"updateUserComment": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"task_comment": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"update_by_user_id": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"projectName",
				"type",
				"username"
			]
		},
		"updateTaskType": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"task_type": {
					"type": "string"
				},
				"update_by_user_id": {
					"type": "string"
				}
			},
			"required": [
				"update_by_user_id",
				"username",
				"type",
				"projectName",
				"task_type"
			]
		},
		"addByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"updateByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context",
				"changes"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				},
				"changes": {
					"type": "object"
				}
			}
		},
		"deleteByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"listModelByCAdmin": {
			"type": "object",
			"required": [
				"list",
				"context"
			],
			"properties": {
				"list": {
					"type": "string"
				},
				"connected": {
					"type": "string"
				},
				"context": {
					"type": "string"
				},
				"listValue": {
					"type": "string"
				},
				"page": {
					"type": "number"
				},
				"connectedModel": {
					"type": "string"
				},
				"sub_catNameValue": {
					"type": "string"
				},
				"searchValue": {
					"type": "string"
				}
			}
		},
		"addRuleByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"updateRuleByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context",
				"changes"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				},
				"changes": {
					"type": "object"
				}
			}
		},
		"deleteRuleByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"listModelRuleByCAdmin": {
			"type": "object",
			"required": [
				"list",
				"context"
			],
			"properties": {
				"list": {
					"type": "string"
				},
				"connected": {
					"type": "string"
				},
				"context": {
					"type": "string"
				},
				"listValue": {
					"type": "string"
				},
				"page": {
					"type": "number"
				},
				"connectedModel": {
					"type": "string"
				},
				"sub_catNameValue": {
					"type": "string"
				},
				"searchValue": {
					"type": "string"
				}
			}
		},
		"triggerRuleByClw": {
			"type": "object",
			"properties": {
				"ruleId": {
					"type": "number"
				},
				"typeOfRule": {
					"type": "number"
				},
				"date": {
					"type": "string"
				}
			}
		},
		"manualSendEmail": {
			"type": "object",
			"required": [
				"mode",
				"context"
			],
			"properties": {
				"mode": {
					"type": "string",
					"enum": [
						"sendEmailToUser"
					]
				},
				"emailTemplateId": {
					"type": "number"
				},
				"userContent": {
					"type": "array",
					"uniqueItems": true,
					"minItems": 0,
					"maxItems": 10,
					"items": {
						"type": "object",
						"properties": {
							"firstname": {
								"type": "string"
							},
							"lastname": {
								"type": "string"
							},
							"emailId": {
								"type": "string",
								"format": "email"
							}
						}
					}
				},
				"context": {
					"type": "string"
				}
			}
		},
		"addStageByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"updateStageByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context",
				"changes"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				},
				"changes": {
					"type": "object"
				}
			}
		},
		"deleteStageByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"listModelStageByCAdmin": {
			"type": "object",
			"required": [
				"list",
				"context"
			],
			"properties": {
				"list": {
					"type": "string"
				},
				"connected": {
					"type": "string"
				},
				"context": {
					"type": "string"
				},
				"listValue": {
					"type": "string"
				},
				"page": {
					"type": "number"
				},
				"connectedModel": {
					"type": "string"
				},
				"sub_catNameValue": {
					"type": "string"
				},
				"searchValue": {
					"type": "string"
				},
				"position_id": {
					"type": "string"
				}
			}
		},
		"addRFIByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"updateRFIByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context",
				"changes"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				},
				"changes": {
					"type": "object"
				}
			}
		},
		"deleteRFIByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"listModelRFIByCAdmin": {
			"type": "object",
			"required": [
				"list",
				"context"
			],
			"properties": {
				"list": {
					"type": "string"
				},
				"connected": {
					"type": "string"
				},
				"context": {
					"type": "string"
				},
				"listValue": {
					"type": "string"
				},
				"page": {
					"type": "number"
				},
				"connectedModel": {
					"type": "string"
				},
				"sub_catNameValue": {
					"type": "string"
				},
				"searchValue": {
					"type": "string"
				},
				"lifecycle_stage_filter": {
					"type": "array",
					"items": {
						"type": "number"
					}
				},
				"application_id": {
					"type": "number"
				},
				"position_id": {
					"type": "string"
				}
			}
		},
		"InsertBlogs": {
			"type": "object",
			"properties": {
				"b_title": {
					"type": "string"
				},
				"b_description": {
					"type": "string"
				},
				"tags": {
					"type": "string"
				},
				"sub_cat_id": {
					"type": "number"
				},
				"status_type": {
					"type": "string"
				}
			},
			"required": [
				"sub_cat_id",
				"b_title",
				"b_description",
				"tags",
				"status_type"
			]
		},
		"UpdateBlogs": {
			"type": "object",
			"properties": {
				"b_id": {
					"type": "number"
				},
				"b_title": {
					"type": "string"
				},
				"b_description": {
					"type": "string"
				},
				"tags": {
					"type": "string"
				},
				"sub_cat_id": {
					"type": "number"
				},
				"status_type": {
					"type": "string"
				}
			},
			"required": [
				"b_id"
			]
		},
		"DeleteBlogs": {
			"type": "object",
			"properties": {
				"b_id": {
					"type": "number"
				}
			},
			"required": [
				"b_id"
			]
		},
		"CreateCategory": {
			"type": "object",
			"properties": {
				"cat_name": {
					"type": "string"
				}
			},
			"required": [
				"cat_name"
			]
		},
		"UpdateCategory": {
			"type": "object",
			"properties": {
				"cat_id": {
					"type": "number"
				},
				"cat_name": {
					"type": "string"
				}
			},
			"required": [
				"cat_id",
				"cat_name"
			]
		},
		"DeleteCategory": {
			"type": "object",
			"properties": {
				"cat_id": {
					"type": "number"
				}
			},
			"required": [
				"cat_id"
			]
		},
		"CreateSubcategory": {
			"type": "object",
			"properties": {
				"cat_id": {
					"type": "number"
				},
				"sub_cat_name": {
					"type": "string"
				}
			},
			"required": [
				"cat_id",
				"sub_cat_name"
			]
		},
		"UpdateSubcategory": {
			"type": "object",
			"properties": {
				"sub_cat_id": {
					"type": "number"
				},
				"cat_id": {
					"type": "number"
				},
				"sub_cat_name": {
					"type": "string"
				}
			},
			"required": [
				"cat_id",
				"sub_cat_id",
				"sub_cat_name"
			]
		},
		"DeleteSubcategory": {
			"type": "object",
			"properties": {
				"sub_cat_id": {
					"type": "number"
				}
			},
			"required": [
				"sub_cat_id"
			]
		},
		"postBadge": {
			"type": "object",
			"properties": {
				"description": {
					"type": "string"
				},
				"badge_name": {
					"type": "string"
				},
				"image_url": {
					"type": "string"
				},
				"visibility": {
					"type": "boolean"
				}
			}
		},
		"updateBadge": {
			"type": "object",
			"properties": {
				"badge_id": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				},
				"badge_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"image_url": {
					"type": "string"
				},
				"visibility": {
					"type": "boolean"
				}
			}
		},
		"patchBadge": {
			"type": "object",
			"properties": {
				"badge_id": {
					"type": "number"
				},
				"show": {
					"type": "string"
				}
			}
		},
		"deleteBadge": {
			"type": "object",
			"properties": {
				"badge_id": {
					"type": "number"
				}
			}
		},
		"postComment": {
			"type": "object",
			"properties": {
				"comment": {
					"type": "string"
				},
				"badge_reciver": {
					"type": "string"
				},
				"badge_id": {
					"type": "number"
				}
			}
		},
		"updateComment": {
			"type": "object",
			"properties": {
				"comment_id": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				}
			}
		},
		"patchComment": {
			"type": "object",
			"properties": {
				"badge_reciver": {
					"type": "string"
				},
				"page": {
					"type": "string"
				}
			}
		},
		"deleteComment": {
			"type": "object",
			"properties": {
				"comment_id": {
					"type": "number"
				}
			}
		},
		"postTrainingAnswer": {
			"type": "object",
			"required": [
				"docName",
				"extension"
			],
			"properties": {
				"docName": {
					"type": "string"
				},
				"extension": {
					"type": "string"
				},
				"mode": {
					"type": "string"
				}
			}
		},
		"updateTrainingAnswer": {
			"type": "object",
			"properties": {
				"answer_id": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				},
				"answer": {
					"type": "string"
				},
				"final": {
					"type": "boolean"
				},
				"id": {
					"type": "number"
				},
				"duration": {
					"type": "string"
				},
				"get_marks": {
					"type": "array"
				},
				"email": {
					"type": "string"
				},
				"answer_url": {
					"type": "string"
				},
				"docname": {
					"type": "string"
				},
				"extension": {
					"type": "string"
				},
				"company_id": {
					"type": "string"
				},
				"position_id": {
					"type": "string"
				},
				"lifecycle_stage": {
					"type": "string"
				}
			}
		},
		"patchTrainingAnswer": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"paper_id": {
					"type": "number"
				},
				"position_id": {
					"type": "string"
				},
				"company_id": {
					"type": "string"
				}
			}
		},
		"deleteTrainingAnswer": {
			"type": "object",
			"properties": {
				"answer_id": {
					"type": "number"
				}
			}
		},
		"postTrainingCategory": {
			"type": "object",
			"properties": {
				"cat_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"image_url": {
					"type": "string"
				}
			}
		},
		"updateTrainingCategory": {
			"type": "object",
			"properties": {
				"category_id": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				},
				"cat_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"image_url": {
					"type": "string"
				}
			}
		},
		"deleteTrainingCategory": {
			"type": "object",
			"properties": {
				"category_id": {
					"type": "number"
				}
			}
		},
		"postTrainingSubCategory": {
			"type": "object",
			"properties": {
				"category_id": {
					"type": "number"
				},
				"sub_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"image_url": {
					"type": "string"
				}
			}
		},
		"updateTrainingSubCategory": {
			"type": "object",
			"properties": {
				"category_id": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				},
				"sub_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"image_url": {
					"type": "string"
				},
				"sub_id": {
					"type": "number"
				}
			}
		},
		"deleteTrainingSubCategory": {
			"type": "object",
			"properties": {
				"sub_id": {
					"type": "number"
				}
			}
		},
		"postTrainingCourse": {
			"type": "object",
			"properties": {
				"sub_id": {
					"type": "number"
				},
				"course_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"image_url": {
					"type": "string"
				}
			}
		},
		"updateTrainingCourse": {
			"type": "object",
			"properties": {
				"course_id": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				},
				"course_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"image_url": {
					"type": "string"
				},
				"sub_id": {
					"type": "number"
				}
			}
		},
		"deleteTrainingCourse": {
			"type": "object",
			"properties": {
				"course_id": {
					"type": "number"
				}
			}
		},
		"patchTrainingCourse": {
			"type": "object",
			"properties": {
				"course_name": {
					"type": "string"
				},
				"page": {
					"type": "number"
				}
			}
		},
		"postTrainingLecture": {
			"type": "object",
			"properties": {
				"course_id": {
					"type": "number"
				},
				"lecture_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"reference": {
					"type": "string"
				}
			}
		},
		"updateTrainingLecture": {
			"type": "object",
			"properties": {
				"course_id": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				},
				"lecture_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"reference": {
					"type": "string"
				},
				"lecture_id": {
					"type": "number"
				}
			}
		},
		"deleteTrainingLecture": {
			"type": "object",
			"properties": {
				"lecture_id": {
					"type": "number"
				}
			}
		},
		"patchTrainingLecture": {
			"type": "object",
			"properties": {
				"lecture_id": {
					"type": "number"
				}
			}
		},
		"postTrainingQuestion": {
			"type": "object",
			"properties": {
				"course_id": {
					"type": "number"
				},
				"level": {
					"type": "string"
				},
				"answer_type": {
					"type": "string"
				},
				"skills": {
					"type": "string"
				},
				"question": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"mcq_option": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"option": {
								"type": "string"
							},
							"answer": {
								"type": "string"
							},
							"isTrue": {
								"type": "boolean"
							}
						}
					}
				},
				"status": {
					"type": "boolean"
				},
				"marks": {
					"type": "number"
				}
			}
		},
		"updateTrainingQuestion": {
			"type": "object",
			"properties": {
				"question_id": {
					"type": "number"
				},
				"level": {
					"type": "string"
				},
				"answer_type": {
					"type": "string"
				},
				"skills": {
					"type": "string"
				},
				"question": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"mcq_option": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"option": {
								"type": "string"
							},
							"answer": {
								"type": "string"
							},
							"isTrue": {
								"type": "boolean"
							}
						}
					}
				},
				"status": {
					"type": "boolean"
				},
				"upload_url": {
					"type": "string"
				},
				"marks": {
					"type": "number"
				}
			}
		},
		"deleteTrainingQuestion": {
			"type": "object",
			"properties": {
				"question_id": {
					"type": "number"
				}
			}
		},
		"patchTrainingQuestion": {
			"type": "object",
			"properties": {
				"course_id": {
					"type": "number"
				},
				"paper_id": {
					"type": "number"
				},
				"user_email": {
					"type": "string"
				},
				"position_id": {
					"type": "string"
				},
				"company_id": {
					"type": "string"
				},
				"position_name": {
					"type": "string"
				},
				"name": {
					"type": "string"
				}
			}
		},
		"postTrainingTrack": {
			"type": "object",
			"properties": {
				"course_id": {
					"type": "number"
				}
			}
		},
		"updateTrainingTrack": {
			"type": "object",
			"properties": {
				"user_courseId": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				},
				"end_date": {
					"type": "string"
				},
				"score": {
					"type": "number"
				}
			}
		},
		"patchTrainingTrack": {
			"type": "object",
			"properties": {
				"page": {
					"type": "number"
				}
			}
		},
		"postCreateTicket": {
			"type": "object",
			"required": [
				"comment",
				"add"
			],
			"properties": {
				"add": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"category": {
					"type": "number"
				},
				"sub_category": {
					"type": "number"
				},
				"ticket_id": {
					"type": "number"
				}
			}
		},
		"logPost": {
			"type": "object",
			"required": [
				"ticket_id",
				"comment"
			],
			"properties": {
				"comment": {
					"type": "string"
				},
				"ticket_id": {
					"type": "number"
				}
			}
		},
		"hcmSLAResolverPut": {
			"type": "object",
			"properties": {
				"ticket_id": {
					"type": "number"
				},
				"comment": {
					"type": "string"
				},
				"add": {
					"type": "string"
				}
			},
			"required": [
				"add",
				"ticket_id"
			]
		},
		"putDistribution": {
			"type": "object",
			"properties": {
				"person_email": {
					"type": "string"
				},
				"ticket_id": {
					"type": "number"
				}
			},
			"required": [
				"ticket_id",
				"person_email"
			]
		},
		"postTable": {
			"type": "object",
			"properties": {
				"table": {
					"type": "string"
				},
				"category": {
					"type": "string"
				},
				"sub_category": {
					"type": "string"
				},
				"issue": {
					"type": "string"
				},
				"category_id": {
					"type": "number"
				},
				"log": {
					"type": "string"
				},
				"ticket_id": {
					"type": "number"
				}
			},
			"required": [
				"table"
			]
		},
		"updatehcmSLATablesDetails": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number"
				},
				"table": {
					"type": "string"
				},
				"category": {
					"type": "string"
				},
				"sub_category": {
					"type": "string"
				},
				"category_id": {
					"type": "number"
				},
				"issue": {
					"type": "string"
				},
				"status": {
					"type": "boolean"
				}
			},
			"required": [
				"id",
				"table"
			]
		},
		"deletehcmSLATablesDetails": {
			"type": "object",
			"required": [
				"id",
				"table"
			],
			"properties": {
				"id": {
					"type": "number"
				},
				"table": {
					"type": "string"
				}
			}
		},
		"searchResBre": {
			"type": "object",
			"properties": {
				"page": {
					"type": "number"
				},
				"get": {
					"type": "string"
				}
			},
			"required": [
				"page",
				"get"
			]
		},
		"deletehcmSLAPlanRawplan": {
			"type": "object",
			"required": [
				"rawplan_name"
			],
			"properties": {
				"rawplan_name": {
					"type": "string"
				}
			}
		},
		"updatehcmSLAPlanRawplan": {
			"type": "object",
			"properties": {
				"rawplan_name": {
					"type": "string"
				},
				"rawplan": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"cycle": {
					"type": "string"
				},
				"status": {
					"type": "boolean"
				}
			},
			"required": [
				"rawplan_name"
			]
		},
		"posthcmSLAPlanRawplan": {
			"type": "object",
			"properties": {
				"rawplan_name": {
					"type": "string"
				},
				"cycle": {
					"type": "string"
				},
				"plan": {
					"type": "array",
					"items": {
						"type": "object"
					}
				}
			},
			"required": [
				"rawplan_name",
				"cycle",
				"plan"
			]
		},
		"deletehcmSLAPlanPlandetails": {
			"type": "object",
			"required": [
				"plan_id"
			],
			"properties": {
				"rawplan_id": {
					"type": "number"
				}
			}
		},
		"updatehcmSLAPlanPlandetails": {
			"type": "object",
			"properties": {
				"plan_id": {
					"type": "number"
				},
				"rawplan_name": {
					"type": "string"
				},
				"ref_id": {
					"type": "number"
				},
				"type_of": {
					"type": "string"
				},
				"total": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				}
			},
			"required": [
				"plan_id"
			]
		},
		"posthcmSLAPlanPlandetails": {
			"type": "object",
			"properties": {
				"rawplan_name": {
					"type": "string"
				},
				"ref_id": {
					"type": "number"
				},
				"type_of": {
					"type": "string"
				},
				"total": {
					"type": "number"
				}
			},
			"required": [
				"rawplan_name",
				"ref_id",
				"type_of"
			]
		},
		"InserthcmPerformance": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"start_date": {
					"type": "string"
				},
				"next_evaluation_date": {
					"type": "string"
				},
				"period_in_days": {
					"type": "number"
				},
				"period_mode": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"plan_id": {
					"type": "number"
				}
			},
			"required": [
				"email",
				"full_name",
				"start_date",
				"next_evaluation_date",
				"period_in_days",
				"description",
				"active",
				"plan_id"
			]
		},
		"UpdatehcmPerformance": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"period_in_days": {
					"type": "number"
				},
				"period_mode": {
					"type": "string"
				},
				"next_evaluation_date": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"plan_id": {
					"type": "number"
				},
				"id": {
					"type": "number"
				},
				"plan_status": {
					"type": "boolean"
				}
			},
			"required": [
				"email",
				"id"
			]
		},
		"PatchhcmPerformance": {
			"type": "object",
			"properties": {
				"page": {
					"type": "number"
				},
				"id": {
					"type": "number"
				},
				"plan_id": {
					"type": "number"
				},
				"active": {
					"type": "boolean"
				}
			},
			"required": [
				"page"
			]
		},
		"DeletehcmPerformance": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"id": {
					"type": "number"
				}
			},
			"required": [
				"email",
				"id"
			]
		},
		"InserthcmEvaluate": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"designation_id": {
					"type": "string"
				},
				"plan_id": {
					"type": "number"
				},
				"test_cycle": {
					"type": "number"
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"period_mode": {
					"type": "string"
				},
				"additional": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"total_percentage": {
					"type": "number"
				}
			},
			"required": [
				"email",
				"full_name",
				"plan_id",
				"designation_id",
				"parameters",
				"test_cycle",
				"period_mode",
				"additional",
				"total_percentage"
			]
		},
		"PatchhcmEvaluate": {
			"type": "object",
			"properties": {
				"page": {
					"type": "number"
				},
				"period_mode": {
					"type": "string"
				},
				"start_date": {
					"type": "string"
				},
				"end_date": {
					"type": "string"
				},
				"plan_id": {
					"type": "number"
				}
			},
			"required": [
				"page"
			]
		},
		"UpdatehcmEvaluate": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"period_mode": {
					"type": "string"
				},
				"test_cycle": {
					"type": "number"
				},
				"designation_id": {
					"type": "string"
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"additional": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"total_percentage": {
					"type": "number"
				},
				"plan_id": {
					"type": "number"
				},
				"id": {
					"type": "number"
				}
			},
			"required": [
				"email",
				"id"
			]
		},
		"DeletehcmEvaluate": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number"
				},
				"email": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"email"
			]
		},
		"InserthcmRoleParameter": {
			"type": "object",
			"properties": {
				"designation_id": {
					"type": "string"
				},
				"params_id": {
					"type": "number"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"created_by": {
					"type": "string"
				}
			},
			"required": [
				"designation_id",
				"params_id",
				"description",
				"active",
				"created_by"
			]
		},
		"UpdatehcmRoleParameter": {
			"type": "object",
			"properties": {
				"designation_id": {
					"type": "string"
				},
				"params_id": {
					"type": "number"
				},
				"sr_no": {
					"type": "number"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"created_by": {
					"type": "string"
				}
			},
			"required": [
				"designation_id",
				"params_id",
				"sr_no",
				"description",
				"active",
				"created_by"
			]
		},
		"DeletehcmRoleParameter": {
			"type": "object",
			"properties": {
				"sr_no": {
					"type": "number"
				}
			},
			"required": [
				"sr_no"
			]
		},
		"InserthcmParameter": {
			"type": "object",
			"properties": {
				"parameter_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"is_common": {
					"type": "boolean"
				},
				"used_by": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"required": [
				"parameter_name",
				"params_id",
				"description",
				"active",
				"created_by"
			]
		},
		"UpdatehcmParameter": {
			"type": "object",
			"properties": {
				"parameter_name": {
					"type": "string"
				},
				"params_id": {
					"type": "number"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"is_common": {
					"type": "boolean"
				},
				"used_by": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"required": [
				"params_id"
			]
		},
		"DeletehcmParameter": {
			"type": "object",
			"properties": {
				"params_id": {
					"type": "array",
					"items": {
						"type": "number"
					}
				}
			},
			"required": [
				"params_id"
			]
		},
		"InserthcmPlans": {
			"type": "object",
			"properties": {
				"plan_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"additional": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"designation_id": {
					"type": "string"
				}
			},
			"required": [
				"plan_name",
				"description",
				"parameters",
				"active",
				"additional",
				"designation_id"
			]
		},
		"UpdatehcmPlans": {
			"type": "object",
			"properties": {
				"plan_name": {
					"type": "string"
				},
				"plan_id": {
					"type": "number"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"designation_id": {
					"type": "string"
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"additional": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"required": [
				"plan_id"
			]
		},
		"DeletehcmPlans": {
			"type": "object",
			"properties": {
				"plan_id": {
					"type": "number"
				}
			},
			"required": [
				"plan_id"
			]
		},
		"Searchpurpose": {
			"type": "object",
			"properties": {
				"page": {
					"type": "number"
				}
			},
			"required": [
				"page"
			]
		},
		"Insertpurpose": {
			"type": "object",
			"properties": {
				"purpose_name": {
					"type": "string"
				},
				"purpose_description": {
					"type": "string"
				},
				"status": {
					"type": "string"
				}
			},
			"required": [
				"purpose_name",
				"status"
			]
		},
		"Updatepurpose": {
			"type": "object",
			"properties": {
				"purpose_id": {
					"type": "number"
				},
				"purpose_name": {
					"type": "string"
				},
				"purpose_description": {
					"type": "string"
				},
				"status": {
					"type": "string"
				}
			},
			"required": [
				"purpose_id"
			]
		},
		"Deletepurpose": {
			"type": "object",
			"properties": {
				"purpose_id": {
					"type": "number"
				}
			},
			"required": [
				"purpose_id"
			]
		},
		"Createlogs": {
			"type": "object",
			"properties": {
				"user_name": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"phone_no": {
					"type": "string"
				},
				"image": {
					"type": "string"
				},
				"comments": {
					"type": "string"
				},
				"purpose_id": {
					"type": "number"
				}
			},
			"required": [
				"phone_no",
				"user_name"
			]
		},
		"Updatelogs": {
			"type": "object",
			"properties": {
				"log_id": {
					"type": "number"
				},
				"user_name": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"phone_no": {
					"type": "string"
				},
				"image": {
					"type": "string"
				},
				"comments": {
					"type": "string"
				},
				"purpose_id": {
					"type": "number"
				}
			},
			"required": [
				"log_id",
				"phone_no",
				"user_name"
			]
		},
		"Deletelogs": {
			"type": "object",
			"properties": {
				"log_id": {
					"type": "number"
				}
			},
			"required": [
				"log_id"
			]
		},
		"Searchlogs": {
			"type": "object",
			"properties": {
				"page": {
					"type": "number"
				},
				"phone_no": {
					"type": "string"
				}
			},
			"required": [
				"phone_no"
			]
		},
		"postHcmQuestionPaper": {
			"type": "object",
			"properties": {
				"title": {
					"type": "string"
				},
				"skill_detail": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"skill": {
								"type": "string"
							},
							"level": {
								"type": "string"
							},
							"q_number": {
								"type": "number"
							}
						}
					}
				},
				"upload_url": {
					"type": "string"
				},
				"duration": {
					"type": "string"
				}
			}
		},
		"updateHcmQuestionPaper": {
			"type": "object",
			"required": [
				"paper_id"
			],
			"properties": {
				"paper_id": {
					"type": "number"
				},
				"status": {
					"type": "boolean"
				},
				"title": {
					"type": "string"
				},
				"skill_detail": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"skill": {
								"type": "string"
							},
							"level": {
								"type": "string"
							},
							"q_number": {
								"type": "number"
							}
						}
					}
				},
				"upload_url": {
					"type": "string"
				},
				"duration": {
					"type": "string"
				}
			}
		},
		"deleteHcmQuestionPaper": {
			"type": "object",
			"properties": {
				"paper_id": {
					"type": "number"
				}
			}
		},
		"patchhcmQuestionPaper": {
			"type": "object",
			"properties": {
				"page": {
					"type": "string"
				},
				"skill_name": {
					"type": "string"
				},
				"paper_id": {
					"type": "number"
				},
				"company_id": {
					"type": "string"
				},
				"position_id": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"assign_status": {
					"type": "boolean"
				}
			}
		},
		"AppraisalDueDatestatusUpdate": {
			"type": "object",
			"properties": {
				"employee_email": {
					"type": "string"
				}
			},
			"required": [
				"employee_email"
			]
		},
		"AppraisalDueDateDelayed": {
			"type": "object",
			"properties": {
				"updateAppraisalUserName": {
					"type": "string"
				},
				"cycle": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"year": {
					"type": "number"
				}
			},
			"required": [
				"updateAppraisalUserName",
				"year",
				"cycle"
			]
		},
		"AppraisalDueDateCount": {
			"type": "object",
			"properties": {
				"start_date": {
					"type": "string"
				},
				"end_date": {
					"type": "string"
				}
			}
		},
		"postLeave": {
			"type": "object",
			"required": [
				"leaveType",
				"fromDate",
				"toDate",
				"reason",
				"earnedLeave"
			],
			"properties": {
				"leaveType": {
					"type": "string"
				},
				"fromDate": {
					"type": "string"
				},
				"toDate": {
					"type": "string"
				},
				"reason": {
					"type": "string"
				},
				"earnedLeave": {
					"type": "boolean"
				}
			}
		},
		"sendTestLink": {
			"type": "object",
			"required": [
				"mode"
			],
			"properties": {
				"mode": {
					"type": "string",
					"enum": [
						"sendTestLinkToUser",
						"markAttendanceByApplicant",
						"sendTestLinkToUserManually",
						"markConfirmationByApplicant",
						"markConfirmationByInterviewer"
					]
				},
				"application_id": {
					"type": "number"
				},
				"lifecycle_stage": {
					"type": "string"
				},
				"job_id": {
					"type": "string"
				},
				"applicant_email": {
					"type": "string"
				},
				"interview_confirmed_by_applicant": {
					"type": "boolean"
				},
				"interviewer_email": {
					"type": "string"
				},
				"interview_confirmed_by_interviewer": {
					"type": "boolean"
				},
				"applicant_attendance": {
					"type": "string"
				}
			}
		},
		"markSandwich": {
			"type": "object",
			"required": [
				"date"
			],
			"properties": {
				"date": {
					"type": "string"
				}
			}
		},
		"SetProbationDueDate": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				}
			},
			"required": [
				"email"
			]
		},
		"UpdateprobationDueDate": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"probationDueDate": {
					"type": "string"
				},
				"probationstatus": {
					"type": "boolean"
				}
			},
			"required": [
				"email"
			]
		},
		"FindCount": {
			"type": "object",
			"properties": {
				"start_date": {
					"type": "string"
				},
				"end_date": {
					"type": "string"
				}
			}
		},
		"addquestionanswer": {
			"type": "object",
			"properties": {
				"question": {
					"type": "string"
				},
				"answer": {
					"type": "string"
				},
				"cat_id": {
					"type": "number"
				}
			},
			"required": [
				"question",
				"answer",
				"cat_id"
			]
		},
		"Updatequestionanswer": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number"
				},
				"question": {
					"type": "string"
				},
				"answer": {
					"type": "string"
				},
				"cat_id": {
					"type": "number"
				}
			},
			"required": [
				"id"
			]
		},
		"deletequestionsanswers": {
			"type": "object",
			"properties": {
				"id": {
					"type": "array",
					"items": {
						"type": "number"
					}
				}
			}
		},
		"addCategory": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			},
			"required": [
				"name"
			]
		},
		"updateCategory": {
			"type": "object",
			"properties": {
				"cat_id": {
					"type": "number"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"status": {
					"type": "boolean"
				}
			},
			"required": [
				"cat_id",
				"name",
				"status"
			]
		},
		"deleteCategory": {
			"type": "object",
			"properties": {
				"cat_id": {
					"type": "array",
					"items": {
						"type": "number"
					}
				}
			},
			"required": [
				"cat_id"
			]
		},
		"InserthcmPerformancePlans": {
			"type": "object",
			"properties": {
				"plan_name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"additional": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"designation_id": {
					"type": "string"
				}
			},
			"required": [
				"plan_name",
				"description",
				"parameters",
				"active",
				"additional",
				"designation_id"
			]
		},
		"UpdatehcmPerformancePlans": {
			"type": "object",
			"properties": {
				"plan_name": {
					"type": "string"
				},
				"plan_id": {
					"type": "number"
				},
				"description": {
					"type": "string"
				},
				"active": {
					"type": "boolean"
				},
				"designation_id": {
					"type": "string"
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"additional": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"required": [
				"plan_id"
			]
		},
		"DeletehcmPerformancePlans": {
			"type": "object",
			"properties": {
				"plan_id": {
					"type": "array",
					"items": {
						"type": "number"
					}
				}
			},
			"required": [
				"plan_id"
			]
		},
		"addMIEByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"updateMIEByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context",
				"changes"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				},
				"changes": {
					"type": "object"
				}
			}
		},
		"deleteMIEByCAdmin": {
			"type": "object",
			"required": [
				"model",
				"value",
				"context"
			],
			"properties": {
				"model": {
					"type": "string"
				},
				"value": {
					"type": "object"
				},
				"context": {
					"type": "string"
				}
			}
		},
		"listModelMIEByCAdmin": {
			"type": "object",
			"required": [
				"list",
				"context"
			],
			"properties": {
				"list": {
					"type": "string"
				},
				"connected": {
					"type": "string"
				},
				"context": {
					"type": "string"
				},
				"listValue": {
					"type": "string"
				},
				"page": {
					"type": "number"
				},
				"connectedModel": {
					"type": "string"
				},
				"searchValue": {
					"type": "string"
				}
			}
		}
	}
}
